// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UpdateImportTaskReqImportTaskAction update import task req import task action
//
// swagger:model UpdateImportTaskReqImportTaskAction
type UpdateImportTaskReqImportTaskAction string

func NewUpdateImportTaskReqImportTaskAction(value UpdateImportTaskReqImportTaskAction) *UpdateImportTaskReqImportTaskAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UpdateImportTaskReqImportTaskAction.
func (m UpdateImportTaskReqImportTaskAction) Pointer() *UpdateImportTaskReqImportTaskAction {
	return &m
}

const (

	// UpdateImportTaskReqImportTaskActionCANCEL captures enum value "CANCEL"
	UpdateImportTaskReqImportTaskActionCANCEL UpdateImportTaskReqImportTaskAction = "CANCEL"
)

// for schema
var updateImportTaskReqImportTaskActionEnum []interface{}

func init() {
	var res []UpdateImportTaskReqImportTaskAction
	if err := json.Unmarshal([]byte(`["CANCEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateImportTaskReqImportTaskActionEnum = append(updateImportTaskReqImportTaskActionEnum, v)
	}
}

func (m UpdateImportTaskReqImportTaskAction) validateUpdateImportTaskReqImportTaskActionEnum(path, location string, value UpdateImportTaskReqImportTaskAction) error {
	if err := validate.EnumCase(path, location, value, updateImportTaskReqImportTaskActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this update import task req import task action
func (m UpdateImportTaskReqImportTaskAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUpdateImportTaskReqImportTaskActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this update import task req import task action based on context it is used
func (m UpdateImportTaskReqImportTaskAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
