// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImportSourceFormatImportSourceFormatType import source format import source format type
//
// swagger:model ImportSourceFormatImportSourceFormatType
type ImportSourceFormatImportSourceFormatType string

func NewImportSourceFormatImportSourceFormatType(value ImportSourceFormatImportSourceFormatType) *ImportSourceFormatImportSourceFormatType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImportSourceFormatImportSourceFormatType.
func (m ImportSourceFormatImportSourceFormatType) Pointer() *ImportSourceFormatImportSourceFormatType {
	return &m
}

const (

	// ImportSourceFormatImportSourceFormatTypeCSV captures enum value "CSV"
	ImportSourceFormatImportSourceFormatTypeCSV ImportSourceFormatImportSourceFormatType = "CSV"

	// ImportSourceFormatImportSourceFormatTypePARQUET captures enum value "PARQUET"
	ImportSourceFormatImportSourceFormatTypePARQUET ImportSourceFormatImportSourceFormatType = "PARQUET"

	// ImportSourceFormatImportSourceFormatTypeSQL captures enum value "SQL"
	ImportSourceFormatImportSourceFormatTypeSQL ImportSourceFormatImportSourceFormatType = "SQL"

	// ImportSourceFormatImportSourceFormatTypeAURORASNAPSHOT captures enum value "AURORA_SNAPSHOT"
	ImportSourceFormatImportSourceFormatTypeAURORASNAPSHOT ImportSourceFormatImportSourceFormatType = "AURORA_SNAPSHOT"
)

// for schema
var importSourceFormatImportSourceFormatTypeEnum []interface{}

func init() {
	var res []ImportSourceFormatImportSourceFormatType
	if err := json.Unmarshal([]byte(`["CSV","PARQUET","SQL","AURORA_SNAPSHOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importSourceFormatImportSourceFormatTypeEnum = append(importSourceFormatImportSourceFormatTypeEnum, v)
	}
}

func (m ImportSourceFormatImportSourceFormatType) validateImportSourceFormatImportSourceFormatTypeEnum(path, location string, value ImportSourceFormatImportSourceFormatType) error {
	if err := validate.EnumCase(path, location, value, importSourceFormatImportSourceFormatTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this import source format import source format type
func (m ImportSourceFormatImportSourceFormatType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImportSourceFormatImportSourceFormatTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this import source format import source format type based on context it is used
func (m ImportSourceFormatImportSourceFormatType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
