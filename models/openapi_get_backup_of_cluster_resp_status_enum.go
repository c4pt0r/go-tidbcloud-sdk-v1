// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenapiGetBackupOfClusterRespStatusEnum openapi get backup of cluster resp status enum
//
// swagger:model openapiGetBackupOfClusterRespStatusEnum
type OpenapiGetBackupOfClusterRespStatusEnum string

func NewOpenapiGetBackupOfClusterRespStatusEnum(value OpenapiGetBackupOfClusterRespStatusEnum) *OpenapiGetBackupOfClusterRespStatusEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpenapiGetBackupOfClusterRespStatusEnum.
func (m OpenapiGetBackupOfClusterRespStatusEnum) Pointer() *OpenapiGetBackupOfClusterRespStatusEnum {
	return &m
}

const (

	// OpenapiGetBackupOfClusterRespStatusEnumPENDING captures enum value "PENDING"
	OpenapiGetBackupOfClusterRespStatusEnumPENDING OpenapiGetBackupOfClusterRespStatusEnum = "PENDING"

	// OpenapiGetBackupOfClusterRespStatusEnumRUNNING captures enum value "RUNNING"
	OpenapiGetBackupOfClusterRespStatusEnumRUNNING OpenapiGetBackupOfClusterRespStatusEnum = "RUNNING"

	// OpenapiGetBackupOfClusterRespStatusEnumFAILED captures enum value "FAILED"
	OpenapiGetBackupOfClusterRespStatusEnumFAILED OpenapiGetBackupOfClusterRespStatusEnum = "FAILED"

	// OpenapiGetBackupOfClusterRespStatusEnumSUCCESS captures enum value "SUCCESS"
	OpenapiGetBackupOfClusterRespStatusEnumSUCCESS OpenapiGetBackupOfClusterRespStatusEnum = "SUCCESS"
)

// for schema
var openapiGetBackupOfClusterRespStatusEnumEnum []interface{}

func init() {
	var res []OpenapiGetBackupOfClusterRespStatusEnum
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","FAILED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiGetBackupOfClusterRespStatusEnumEnum = append(openapiGetBackupOfClusterRespStatusEnumEnum, v)
	}
}

func (m OpenapiGetBackupOfClusterRespStatusEnum) validateOpenapiGetBackupOfClusterRespStatusEnumEnum(path, location string, value OpenapiGetBackupOfClusterRespStatusEnum) error {
	if err := validate.EnumCase(path, location, value, openapiGetBackupOfClusterRespStatusEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openapi get backup of cluster resp status enum
func (m OpenapiGetBackupOfClusterRespStatusEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenapiGetBackupOfClusterRespStatusEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openapi get backup of cluster resp status enum based on context it is used
func (m OpenapiGetBackupOfClusterRespStatusEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
