// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiImportStatus ImportStatus
//
// ImportStatus represents the status of an import task.
//
// swagger:model openapiImportStatus
type OpenapiImportStatus struct {

	// The end timestamp of the import task. The format is Unix timestamp (the seconds elapsed since the Unix epoch).
	// Example: 1676450897
	EndTimestamp string `json:"end_timestamp,omitempty"`

	// The error message of the import task.
	// Example: some error occurs
	ErrorMessage string `json:"error_message,omitempty"`

	// The current phase that the import task is in.
	// Example: IMPORTING
	// Required: true
	// Enum: ["PREPARING","IMPORTING","COMPLETED","FAILED","CANCELING","CANCELED"]
	Phase *string `json:"phase"`

	// progress
	Progress *OpenapiImportStatusProgress `json:"progress,omitempty"`

	// The total size of the import task's data source. The unit is bytes.
	// Example: 10737418240
	SourceTotalSizeBytes string `json:"source_total_size_bytes,omitempty"`

	// The start timestamp of the import task. The format is Unix timestamp (the seconds elapsed since the Unix epoch)
	// Example: 1676450597
	StartTimestamp string `json:"start_timestamp,omitempty"`
}

// Validate validates this openapi import status
func (m *OpenapiImportStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var openapiImportStatusTypePhasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PREPARING","IMPORTING","COMPLETED","FAILED","CANCELING","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiImportStatusTypePhasePropEnum = append(openapiImportStatusTypePhasePropEnum, v)
	}
}

const (

	// OpenapiImportStatusPhasePREPARING captures enum value "PREPARING"
	OpenapiImportStatusPhasePREPARING string = "PREPARING"

	// OpenapiImportStatusPhaseIMPORTING captures enum value "IMPORTING"
	OpenapiImportStatusPhaseIMPORTING string = "IMPORTING"

	// OpenapiImportStatusPhaseCOMPLETED captures enum value "COMPLETED"
	OpenapiImportStatusPhaseCOMPLETED string = "COMPLETED"

	// OpenapiImportStatusPhaseFAILED captures enum value "FAILED"
	OpenapiImportStatusPhaseFAILED string = "FAILED"

	// OpenapiImportStatusPhaseCANCELING captures enum value "CANCELING"
	OpenapiImportStatusPhaseCANCELING string = "CANCELING"

	// OpenapiImportStatusPhaseCANCELED captures enum value "CANCELED"
	OpenapiImportStatusPhaseCANCELED string = "CANCELED"
)

// prop value enum
func (m *OpenapiImportStatus) validatePhaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiImportStatusTypePhasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiImportStatus) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	// value enum
	if err := m.validatePhaseEnum("phase", "body", *m.Phase); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiImportStatus) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openapi import status based on the context it is used
func (m *OpenapiImportStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportStatus) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {

		if swag.IsZero(m.Progress) { // not required
			return nil
		}

		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiImportStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiImportStatus) UnmarshalBinary(b []byte) error {
	var res OpenapiImportStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiImportStatusProgress ImportProgress
//
// The progress of the import task.
//
// swagger:model OpenapiImportStatusProgress
type OpenapiImportStatusProgress struct {

	// The overall importing progress of the import task.
	// Example: 59
	// Required: true
	// Maximum: 100
	ImportProgress *float64 `json:"import_progress"`

	// The overall validation progress of the import task after the data has been imported into the target cluster.
	// Example: 59
	// Required: true
	// Maximum: 100
	ValidationProgress *float64 `json:"validation_progress"`
}

// Validate validates this openapi import status progress
func (m *OpenapiImportStatusProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImportProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportStatusProgress) validateImportProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress"+"."+"import_progress", "body", m.ImportProgress); err != nil {
		return err
	}

	if err := validate.Maximum("progress"+"."+"import_progress", "body", *m.ImportProgress, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiImportStatusProgress) validateValidationProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress"+"."+"validation_progress", "body", m.ValidationProgress); err != nil {
		return err
	}

	if err := validate.Maximum("progress"+"."+"validation_progress", "body", *m.ValidationProgress, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi import status progress based on context it is used
func (m *OpenapiImportStatusProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiImportStatusProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiImportStatusProgress) UnmarshalBinary(b []byte) error {
	var res OpenapiImportStatusProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
