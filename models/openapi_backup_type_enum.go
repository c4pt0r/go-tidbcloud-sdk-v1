// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenapiBackupTypeEnum openapi backup type enum
//
// swagger:model openapiBackupTypeEnum
type OpenapiBackupTypeEnum string

func NewOpenapiBackupTypeEnum(value OpenapiBackupTypeEnum) *OpenapiBackupTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpenapiBackupTypeEnum.
func (m OpenapiBackupTypeEnum) Pointer() *OpenapiBackupTypeEnum {
	return &m
}

const (

	// OpenapiBackupTypeEnumMANUAL captures enum value "MANUAL"
	OpenapiBackupTypeEnumMANUAL OpenapiBackupTypeEnum = "MANUAL"

	// OpenapiBackupTypeEnumAUTO captures enum value "AUTO"
	OpenapiBackupTypeEnumAUTO OpenapiBackupTypeEnum = "AUTO"
)

// for schema
var openapiBackupTypeEnumEnum []interface{}

func init() {
	var res []OpenapiBackupTypeEnum
	if err := json.Unmarshal([]byte(`["MANUAL","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiBackupTypeEnumEnum = append(openapiBackupTypeEnumEnum, v)
	}
}

func (m OpenapiBackupTypeEnum) validateOpenapiBackupTypeEnumEnum(path, location string, value OpenapiBackupTypeEnum) error {
	if err := validate.EnumCase(path, location, value, openapiBackupTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openapi backup type enum
func (m OpenapiBackupTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenapiBackupTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openapi backup type enum based on context it is used
func (m OpenapiBackupTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
