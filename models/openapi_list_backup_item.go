// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiListBackupItem ListBackupItem
//
// The item of backup list.
//
// swagger:model openapiListBackupItem
type OpenapiListBackupItem struct {

	// The creation time of the backup in UTC. The time format follows the [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) standard, which is `YYYY-MM-DD` (year-month-day) + T +`HH:MM:SS` (hour-minutes-seconds) + Z. For example, `2020-01-01T00:00:00Z`.
	// Example: 2020-01-01T00:00:00Z
	// Format: date-time
	CreateTimestamp strfmt.DateTime `json:"create_timestamp,omitempty"`

	// The description of the backup. It is specified by the user when taking a manual type backup. It helps you add additional information to the backup.
	// Example: backup for cluster upgrade in 2022/06/07
	Description string `json:"description,omitempty"`

	// The ID of the backup. It is generated by TiDB Cloud.
	// Example: 1
	ID string `json:"id,omitempty"`

	// The name of the backup.
	// Example: backup-1
	Name string `json:"name,omitempty"`

	// The bytes of the backup.
	// Example: 102400
	Size string `json:"size,omitempty"`

	// The status of backup.
	// Example: SUCCESS
	// Enum: ["PENDING","RUNNING","FAILED","SUCCESS"]
	Status string `json:"status,omitempty"`

	// The type of backup. TiDB Cloud only supports manual and auto backup. For more information, see [TiDB Cloud Documentation](https://docs.pingcap.com/tidbcloud/backup-and-restore#backup).
	// Example: MANUAL
	// Enum: ["MANUAL","AUTO"]
	Type string `json:"type,omitempty"`
}

// Validate validates this openapi list backup item
func (m *OpenapiListBackupItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListBackupItem) validateCreateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("create_timestamp", "body", "date-time", m.CreateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var openapiListBackupItemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","FAILED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListBackupItemTypeStatusPropEnum = append(openapiListBackupItemTypeStatusPropEnum, v)
	}
}

const (

	// OpenapiListBackupItemStatusPENDING captures enum value "PENDING"
	OpenapiListBackupItemStatusPENDING string = "PENDING"

	// OpenapiListBackupItemStatusRUNNING captures enum value "RUNNING"
	OpenapiListBackupItemStatusRUNNING string = "RUNNING"

	// OpenapiListBackupItemStatusFAILED captures enum value "FAILED"
	OpenapiListBackupItemStatusFAILED string = "FAILED"

	// OpenapiListBackupItemStatusSUCCESS captures enum value "SUCCESS"
	OpenapiListBackupItemStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *OpenapiListBackupItem) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListBackupItemTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListBackupItem) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var openapiListBackupItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListBackupItemTypeTypePropEnum = append(openapiListBackupItemTypeTypePropEnum, v)
	}
}

const (

	// OpenapiListBackupItemTypeMANUAL captures enum value "MANUAL"
	OpenapiListBackupItemTypeMANUAL string = "MANUAL"

	// OpenapiListBackupItemTypeAUTO captures enum value "AUTO"
	OpenapiListBackupItemTypeAUTO string = "AUTO"
)

// prop value enum
func (m *OpenapiListBackupItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListBackupItemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListBackupItem) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi list backup item based on context it is used
func (m *OpenapiListBackupItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListBackupItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListBackupItem) UnmarshalBinary(b []byte) error {
	var res OpenapiListBackupItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
