// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiImportTaskRoleInfo ImportTaskRoleInfo
//
// ImportTaskRoleInfo is the role information for import tasks on a cluster. You can use this information to configure the access for the import tasks to retrieve the data from the data source.
//
// swagger:model openapiImportTaskRoleInfo
type OpenapiImportTaskRoleInfo struct {

	// aws import role
	AwsImportRole *OpenapiImportTaskRoleInfoAwsImportRole `json:"aws_import_role,omitempty"`

	// gcp import role
	GcpImportRole *OpenapiImportTaskRoleInfoGcpImportRole `json:"gcp_import_role,omitempty"`
}

// Validate validates this openapi import task role info
func (m *OpenapiImportTaskRoleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsImportRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpImportRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportTaskRoleInfo) validateAwsImportRole(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsImportRole) { // not required
		return nil
	}

	if m.AwsImportRole != nil {
		if err := m.AwsImportRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_import_role")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiImportTaskRoleInfo) validateGcpImportRole(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpImportRole) { // not required
		return nil
	}

	if m.GcpImportRole != nil {
		if err := m.GcpImportRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_import_role")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openapi import task role info based on the context it is used
func (m *OpenapiImportTaskRoleInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsImportRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpImportRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportTaskRoleInfo) contextValidateAwsImportRole(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsImportRole != nil {
		if err := m.AwsImportRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_import_role")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiImportTaskRoleInfo) contextValidateGcpImportRole(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpImportRole != nil {
		if err := m.GcpImportRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_import_role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiImportTaskRoleInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiImportTaskRoleInfo) UnmarshalBinary(b []byte) error {
	var res OpenapiImportTaskRoleInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiImportTaskRoleInfoAwsImportRole AwsImportTaskRoleInfo
//
// The import role information for an AWS cluster. Only TiDB clusters on AWS return this information. If the TiDB cluster is deployed on GCP, this field is not returned.
//
// swagger:model OpenapiImportTaskRoleInfoAwsImportRole
type OpenapiImportTaskRoleInfoAwsImportRole struct {

	// The account ID under which the import tasks for this cluster are running.
	// Example: 999999999999
	// Required: true
	AccountID *string `json:"account_id"`

	// The unique external ID that binds to the cluster, which is a long string. When an import task starts and attempts to assume a specified role, it automatically attaches this external ID. This means that you can configure this external ID in the assumed role's trust relationship, so that only the import task of that specified cluster can access the data by assuming the role. This can provide additional security.
	// Example: abcdefghijklmnopqrstuvwxyz0123456789xxxxxxxxxxxxxx
	// Required: true
	ExternalID *string `json:"external_id"`
}

// Validate validates this openapi import task role info aws import role
func (m *OpenapiImportTaskRoleInfoAwsImportRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportTaskRoleInfoAwsImportRole) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("aws_import_role"+"."+"account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiImportTaskRoleInfoAwsImportRole) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("aws_import_role"+"."+"external_id", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi import task role info aws import role based on context it is used
func (m *OpenapiImportTaskRoleInfoAwsImportRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiImportTaskRoleInfoAwsImportRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiImportTaskRoleInfoAwsImportRole) UnmarshalBinary(b []byte) error {
	var res OpenapiImportTaskRoleInfoAwsImportRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiImportTaskRoleInfoGcpImportRole GcpImportTaskRoleInfo
//
// The import role information for a GCP cluster. Only TiDB clusters on GCP return this information. If the TiDB cluster is deployed on AWS, this field is not returned.
//
// swagger:model OpenapiImportTaskRoleInfoGcpImportRole
type OpenapiImportTaskRoleInfoGcpImportRole struct {

	// The account ID under which the import tasks for this cluster are running.
	// Example: example-account@example.com
	// Required: true
	AccountID *string `json:"account_id"`
}

// Validate validates this openapi import task role info gcp import role
func (m *OpenapiImportTaskRoleInfoGcpImportRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportTaskRoleInfoGcpImportRole) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("gcp_import_role"+"."+"account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi import task role info gcp import role based on context it is used
func (m *OpenapiImportTaskRoleInfoGcpImportRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiImportTaskRoleInfoGcpImportRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiImportTaskRoleInfoGcpImportRole) UnmarshalBinary(b []byte) error {
	var res OpenapiImportTaskRoleInfoGcpImportRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
