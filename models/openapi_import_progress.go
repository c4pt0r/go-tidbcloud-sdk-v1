// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiImportProgress ImportProgress
//
// ImportProgress represents the progress information of an import task.
//
// swagger:model openapiImportProgress
type OpenapiImportProgress struct {

	// The overall importing progress of the import task.
	// Example: 59
	// Required: true
	// Maximum: 100
	ImportProgress *float64 `json:"import_progress"`

	// The overall validation progress of the import task after the data has been imported into the target cluster.
	// Example: 59
	// Required: true
	// Maximum: 100
	ValidationProgress *float64 `json:"validation_progress"`
}

// Validate validates this openapi import progress
func (m *OpenapiImportProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImportProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationProgress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiImportProgress) validateImportProgress(formats strfmt.Registry) error {

	if err := validate.Required("import_progress", "body", m.ImportProgress); err != nil {
		return err
	}

	if err := validate.Maximum("import_progress", "body", *m.ImportProgress, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiImportProgress) validateValidationProgress(formats strfmt.Registry) error {

	if err := validate.Required("validation_progress", "body", m.ValidationProgress); err != nil {
		return err
	}

	if err := validate.Maximum("validation_progress", "body", *m.ValidationProgress, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi import progress based on context it is used
func (m *OpenapiImportProgress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiImportProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiImportProgress) UnmarshalBinary(b []byte) error {
	var res OpenapiImportProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
