// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiPreviewImportDataResp PreviewImportDataResp
//
// PreviewImportDataResp is the response of the source data preview before starting an import task.
//
// swagger:model openapiPreviewImportDataResp
type OpenapiPreviewImportDataResp struct {

	// The preview results for each target table from the import task specification.
	TablePreviews []*OpenapiPreviewImportDataRespTablePreviewsItems0 `json:"table_previews"`
}

// Validate validates this openapi preview import data resp
func (m *OpenapiPreviewImportDataResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTablePreviews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataResp) validateTablePreviews(formats strfmt.Registry) error {
	if swag.IsZero(m.TablePreviews) { // not required
		return nil
	}

	for i := 0; i < len(m.TablePreviews); i++ {
		if swag.IsZero(m.TablePreviews[i]) { // not required
			continue
		}

		if m.TablePreviews[i] != nil {
			if err := m.TablePreviews[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("table_previews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("table_previews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi preview import data resp based on the context it is used
func (m *OpenapiPreviewImportDataResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTablePreviews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataResp) contextValidateTablePreviews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TablePreviews); i++ {

		if m.TablePreviews[i] != nil {

			if swag.IsZero(m.TablePreviews[i]) { // not required
				return nil
			}

			if err := m.TablePreviews[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("table_previews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("table_previews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiPreviewImportDataResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiPreviewImportDataResp) UnmarshalBinary(b []byte) error {
	var res OpenapiPreviewImportDataResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiPreviewImportDataRespTablePreviewsItems0 TablePreview
//
// TablePreview is the preview result for a single table.
//
// swagger:model OpenapiPreviewImportDataRespTablePreviewsItems0
type OpenapiPreviewImportDataRespTablePreviewsItems0 struct {

	// data preview
	// Required: true
	DataPreview *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview `json:"data_preview"`

	// The database name of the preview table.
	// Example: db01
	// Required: true
	DatabaseName *string `json:"database_name"`

	// schema preview
	SchemaPreview *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview `json:"schema_preview,omitempty"`

	// The table name of the preview table.
	// Example: table01
	// Required: true
	TableName *string `json:"table_name"`
}

// Validate validates this openapi preview import data resp table previews items0
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataPreview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaPreview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) validateDataPreview(formats strfmt.Registry) error {

	if err := validate.Required("data_preview", "body", m.DataPreview); err != nil {
		return err
	}

	if m.DataPreview != nil {
		if err := m.DataPreview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("database_name", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) validateSchemaPreview(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaPreview) { // not required
		return nil
	}

	if m.SchemaPreview != nil {
		if err := m.SchemaPreview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) validateTableName(formats strfmt.Registry) error {

	if err := validate.Required("table_name", "body", m.TableName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openapi preview import data resp table previews items0 based on the context it is used
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataPreview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaPreview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) contextValidateDataPreview(ctx context.Context, formats strfmt.Registry) error {

	if m.DataPreview != nil {

		if err := m.DataPreview.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) contextValidateSchemaPreview(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemaPreview != nil {

		if swag.IsZero(m.SchemaPreview) { // not required
			return nil
		}

		if err := m.SchemaPreview.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_preview")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiPreviewImportDataRespTablePreviewsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview TableData
//
// The data sample for the preview table.
//
// swagger:model OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview
type OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview struct {

	// The column names for the following data samples from a table.
	// Example: ["id","column01"]
	ColumnNames []string `json:"column_names"`

	// The rows sampled from a table.
	// Required: true
	Rows []*OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0 `json:"rows"`
}

// Validate validates this openapi preview import data resp table previews items0 data preview
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview) validateRows(formats strfmt.Registry) error {

	if err := validate.Required("data_preview"+"."+"rows", "body", m.Rows); err != nil {
		return err
	}

	for i := 0; i < len(m.Rows); i++ {
		if swag.IsZero(m.Rows[i]) { // not required
			continue
		}

		if m.Rows[i] != nil {
			if err := m.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi preview import data resp table previews items0 data preview based on the context it is used
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview) contextValidateRows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rows); i++ {

		if m.Rows[i] != nil {

			if swag.IsZero(m.Rows[i]) { // not required
				return nil
			}

			if err := m.Rows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview) UnmarshalBinary(b []byte) error {
	var res OpenapiPreviewImportDataRespTablePreviewsItems0DataPreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0 TableDataRow
//
// TableDataRow is a single row in a table.
//
// swagger:model OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0
type OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0 struct {

	// The columns extracted from a table row.
	// Example: ["1","abc"]
	// Required: true
	Columns []string `json:"columns"`
}

// Validate validates this openapi preview import data resp table previews items0 data preview rows items0
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0) validateColumns(formats strfmt.Registry) error {

	if err := validate.Required("columns", "body", m.Columns); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi preview import data resp table previews items0 data preview rows items0 based on context it is used
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiPreviewImportDataRespTablePreviewsItems0DataPreviewRowsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview TableSchema
//
// The schema for the preview table.
//
// swagger:model OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview
type OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview struct {

	// The column definition for each column in the table.
	// Example: [{"column_name":"id","column_type":"INTEGER"},{"column_name":"column01","column_type":"VARCHAR(255)"}]
	// Required: true
	ColumnDefinitions []*OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0 `json:"column_definitions"`

	// The primary key column names for the table. This is optional. The primary key is taken into account when the table is pre-created before an import task is started.
	// Example: ["id"]
	PrimaryKeyColumns []string `json:"primary_key_columns"`
}

// Validate validates this openapi preview import data resp table previews items0 schema preview
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview) validateColumnDefinitions(formats strfmt.Registry) error {

	if err := validate.Required("schema_preview"+"."+"column_definitions", "body", m.ColumnDefinitions); err != nil {
		return err
	}

	for i := 0; i < len(m.ColumnDefinitions); i++ {
		if swag.IsZero(m.ColumnDefinitions[i]) { // not required
			continue
		}

		if m.ColumnDefinitions[i] != nil {
			if err := m.ColumnDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi preview import data resp table previews items0 schema preview based on the context it is used
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColumnDefinitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview) contextValidateColumnDefinitions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ColumnDefinitions); i++ {

		if m.ColumnDefinitions[i] != nil {

			if swag.IsZero(m.ColumnDefinitions[i]) { // not required
				return nil
			}

			if err := m.ColumnDefinitions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview) UnmarshalBinary(b []byte) error {
	var res OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0 ColumnDefinition
//
// ColumnDefinition is the definition of a column in a table.
//
// swagger:model OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0
type OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0 struct {

	// The column name.
	// Example: column01
	// Required: true
	ColumnName *string `json:"column_name"`

	// The column type.
	// Example: VARCHAR(255)
	// Required: true
	ColumnType *string `json:"column_type"`
}

// Validate validates this openapi preview import data resp table previews items0 schema preview column definitions items0
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0) validateColumnName(formats strfmt.Registry) error {

	if err := validate.Required("column_name", "body", m.ColumnName); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0) validateColumnType(formats strfmt.Registry) error {

	if err := validate.Required("column_type", "body", m.ColumnType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi preview import data resp table previews items0 schema preview column definitions items0 based on context it is used
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiPreviewImportDataRespTablePreviewsItems0SchemaPreviewColumnDefinitionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
