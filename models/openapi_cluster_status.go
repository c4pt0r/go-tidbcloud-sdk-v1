// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenapiClusterStatus openapi cluster status
//
// swagger:model openapiClusterStatus
type OpenapiClusterStatus string

func NewOpenapiClusterStatus(value OpenapiClusterStatus) *OpenapiClusterStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpenapiClusterStatus.
func (m OpenapiClusterStatus) Pointer() *OpenapiClusterStatus {
	return &m
}

const (

	// OpenapiClusterStatusAVAILABLE captures enum value "AVAILABLE"
	OpenapiClusterStatusAVAILABLE OpenapiClusterStatus = "AVAILABLE"

	// OpenapiClusterStatusCREATING captures enum value "CREATING"
	OpenapiClusterStatusCREATING OpenapiClusterStatus = "CREATING"

	// OpenapiClusterStatusMODIFYING captures enum value "MODIFYING"
	OpenapiClusterStatusMODIFYING OpenapiClusterStatus = "MODIFYING"

	// OpenapiClusterStatusPAUSED captures enum value "PAUSED"
	OpenapiClusterStatusPAUSED OpenapiClusterStatus = "PAUSED"

	// OpenapiClusterStatusRESUMING captures enum value "RESUMING"
	OpenapiClusterStatusRESUMING OpenapiClusterStatus = "RESUMING"

	// OpenapiClusterStatusUNAVAILABLE captures enum value "UNAVAILABLE"
	OpenapiClusterStatusUNAVAILABLE OpenapiClusterStatus = "UNAVAILABLE"

	// OpenapiClusterStatusIMPORTING captures enum value "IMPORTING"
	OpenapiClusterStatusIMPORTING OpenapiClusterStatus = "IMPORTING"

	// OpenapiClusterStatusMAINTAINING captures enum value "MAINTAINING"
	OpenapiClusterStatusMAINTAINING OpenapiClusterStatus = "MAINTAINING"

	// OpenapiClusterStatusPAUSING captures enum value "PAUSING"
	OpenapiClusterStatusPAUSING OpenapiClusterStatus = "PAUSING"
)

// for schema
var openapiClusterStatusEnum []interface{}

func init() {
	var res []OpenapiClusterStatus
	if err := json.Unmarshal([]byte(`["AVAILABLE","CREATING","MODIFYING","PAUSED","RESUMING","UNAVAILABLE","IMPORTING","MAINTAINING","PAUSING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiClusterStatusEnum = append(openapiClusterStatusEnum, v)
	}
}

func (m OpenapiClusterStatus) validateOpenapiClusterStatusEnum(path, location string, value OpenapiClusterStatus) error {
	if err := validate.EnumCase(path, location, value, openapiClusterStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openapi cluster status
func (m OpenapiClusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenapiClusterStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openapi cluster status based on context it is used
func (m OpenapiClusterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
