// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiListPrivateEndpointsResp ListPrivateEndpointsResp
//
// ListPrivateEndpointsResp is the response for listing private endpoints for a cluster.
//
// swagger:model openapiListPrivateEndpointsResp
type OpenapiListPrivateEndpointsResp struct {

	// The private endpoints for the cluster.
	// Required: true
	Endpoints []*OpenapiListPrivateEndpointsRespEndpointsItems0 `json:"endpoints"`
}

// Validate validates this openapi list private endpoints resp
func (m *OpenapiListPrivateEndpointsResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListPrivateEndpointsResp) validateEndpoints(formats strfmt.Registry) error {

	if err := validate.Required("endpoints", "body", m.Endpoints); err != nil {
		return err
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi list private endpoints resp based on the context it is used
func (m *OpenapiListPrivateEndpointsResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListPrivateEndpointsResp) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Endpoints); i++ {

		if m.Endpoints[i] != nil {

			if swag.IsZero(m.Endpoints[i]) { // not required
				return nil
			}

			if err := m.Endpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListPrivateEndpointsResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListPrivateEndpointsResp) UnmarshalBinary(b []byte) error {
	var res OpenapiListPrivateEndpointsResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListPrivateEndpointsRespEndpointsItems0 openapi list private endpoints resp endpoints items0
//
// swagger:model OpenapiListPrivateEndpointsRespEndpointsItems0
type OpenapiListPrivateEndpointsRespEndpointsItems0 struct {

	// [Output Only] The cloud provider on which the private endpoint service is hosted.
	// - `"AWS"`: the Amazon Web Services cloud provider
	// - `"GCP"`: the Google Cloud cloud provider
	// Example: AWS
	// Enum: ["AWS","GCP"]
	CloudProvider string `json:"cloud_provider,omitempty"`

	// [Output Only] The ID of the cluster.
	// Example: 1
	ClusterID string `json:"cluster_id,omitempty"`

	// [Output Only] The name of the cluster.
	// Example: Cluster0
	ClusterName string `json:"cluster_name,omitempty"`

	// The format of the private endpoint name varies by cloud provider: `"vpce-xxxx"` for AWS and `"projects/xxx/regions/xxx/forwardingRules/xxx"` for Google Cloud.
	// Example: vpce-01234567890123456
	EndpointName string `json:"endpoint_name,omitempty"`

	// [Output Only] The ID of private endpoint. It is used when you [deleting the endpoint](#tag/Cluster/operation/DeletePrivateEndpoint).
	// Example: 1
	ID string `json:"id,omitempty"`

	// [Output Only] The detailed message when the `status` is "FAILED".
	// Example: The endpoint does not exist.
	Message string `json:"message,omitempty"`

	// [Output Only] The region where the private endpoint is hosted, such as Oregon in AWS.
	// Example: Oregon
	RegionName string `json:"region_name,omitempty"`

	// [Output Only] The service name of the private endpoint.
	// Example: com.amazonaws.vpce.us-west-2.vpce-svc-01234567890123456
	ServiceName string `json:"service_name,omitempty"`

	// [Output Only] The status of the private endpoint service.
	// Example: ACTIVE
	// Enum: ["CREATING","ACTIVE","DELETING"]
	ServiceStatus string `json:"service_status,omitempty"`

	// [Output Only] The status of the private endpoint.
	// Example: FAILED
	// Enum: ["PENDING","ACTIVE","DELETING","FAILED"]
	Status string `json:"status,omitempty"`
}

// Validate validates this openapi list private endpoints resp endpoints items0
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var openapiListPrivateEndpointsRespEndpointsItems0TypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListPrivateEndpointsRespEndpointsItems0TypeCloudProviderPropEnum = append(openapiListPrivateEndpointsRespEndpointsItems0TypeCloudProviderPropEnum, v)
	}
}

const (

	// OpenapiListPrivateEndpointsRespEndpointsItems0CloudProviderAWS captures enum value "AWS"
	OpenapiListPrivateEndpointsRespEndpointsItems0CloudProviderAWS string = "AWS"

	// OpenapiListPrivateEndpointsRespEndpointsItems0CloudProviderGCP captures enum value "GCP"
	OpenapiListPrivateEndpointsRespEndpointsItems0CloudProviderGCP string = "GCP"
)

// prop value enum
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListPrivateEndpointsRespEndpointsItems0TypeCloudProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) validateCloudProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudProviderEnum("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

var openapiListPrivateEndpointsRespEndpointsItems0TypeServiceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListPrivateEndpointsRespEndpointsItems0TypeServiceStatusPropEnum = append(openapiListPrivateEndpointsRespEndpointsItems0TypeServiceStatusPropEnum, v)
	}
}

const (

	// OpenapiListPrivateEndpointsRespEndpointsItems0ServiceStatusCREATING captures enum value "CREATING"
	OpenapiListPrivateEndpointsRespEndpointsItems0ServiceStatusCREATING string = "CREATING"

	// OpenapiListPrivateEndpointsRespEndpointsItems0ServiceStatusACTIVE captures enum value "ACTIVE"
	OpenapiListPrivateEndpointsRespEndpointsItems0ServiceStatusACTIVE string = "ACTIVE"

	// OpenapiListPrivateEndpointsRespEndpointsItems0ServiceStatusDELETING captures enum value "DELETING"
	OpenapiListPrivateEndpointsRespEndpointsItems0ServiceStatusDELETING string = "DELETING"
)

// prop value enum
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) validateServiceStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListPrivateEndpointsRespEndpointsItems0TypeServiceStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) validateServiceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceStatusEnum("service_status", "body", m.ServiceStatus); err != nil {
		return err
	}

	return nil
}

var openapiListPrivateEndpointsRespEndpointsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","ACTIVE","DELETING","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListPrivateEndpointsRespEndpointsItems0TypeStatusPropEnum = append(openapiListPrivateEndpointsRespEndpointsItems0TypeStatusPropEnum, v)
	}
}

const (

	// OpenapiListPrivateEndpointsRespEndpointsItems0StatusPENDING captures enum value "PENDING"
	OpenapiListPrivateEndpointsRespEndpointsItems0StatusPENDING string = "PENDING"

	// OpenapiListPrivateEndpointsRespEndpointsItems0StatusACTIVE captures enum value "ACTIVE"
	OpenapiListPrivateEndpointsRespEndpointsItems0StatusACTIVE string = "ACTIVE"

	// OpenapiListPrivateEndpointsRespEndpointsItems0StatusDELETING captures enum value "DELETING"
	OpenapiListPrivateEndpointsRespEndpointsItems0StatusDELETING string = "DELETING"

	// OpenapiListPrivateEndpointsRespEndpointsItems0StatusFAILED captures enum value "FAILED"
	OpenapiListPrivateEndpointsRespEndpointsItems0StatusFAILED string = "FAILED"
)

// prop value enum
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListPrivateEndpointsRespEndpointsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi list private endpoints resp endpoints items0 based on context it is used
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListPrivateEndpointsRespEndpointsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiListPrivateEndpointsRespEndpointsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
