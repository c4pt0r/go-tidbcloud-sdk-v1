// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiListProviderRegionsItem ListProviderRegionsItem
//
// ListProviderRegionsItem is the item of provider regions.
//
// swagger:model openapiListProviderRegionsItem
type OpenapiListProviderRegionsItem struct {

	// The cloud provider on which your TiDB cluster is hosted.
	// - `"AWS"`: the Amazon Web Services cloud provider
	// - `"GCP"`: the Google Cloud cloud provider
	// Example: AWS
	// Enum: [AWS GCP]
	CloudProvider string `json:"cloud_provider,omitempty"`

	// The cluster type.
	// - `"DEVELOPER"`: a [TiDB Serverless](https://docs.pingcap.com/tidbcloud/select-cluster-tier#tidb-serverless) cluster
	// - `"DEDICATED"`: a [TiDB Dedicated](https://docs.pingcap.com/tidbcloud/select-cluster-tier#dedicated-tier) cluster
	//
	// **Warning:** `"DEVELOPER"` will soon be changed to `"SERVERLESS"` to represent TiDB Serverless clusters.
	// Example: DEDICATED
	// Enum: [DEDICATED DEVELOPER]
	ClusterType string `json:"cluster_type,omitempty"`

	// The region in which your TiDB cluster is hosted.
	//
	// For the detailed information on each region, refer to the documentation of the corresponding cloud provider ([AWS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html) | [GCP](https://cloud.google.com/about/locations#americas)).
	//
	// For example, `"us-west-2"` refers to Oregon for AWS.
	// Example: us-west-2
	Region string `json:"region,omitempty"`

	// The list of TiDB specifications in the region.
	Tidb []*OpenapiListProviderRegionsItemTidbItems0 `json:"tidb"`

	// The list of TiFlash specifications in the region.
	Tiflash []*OpenapiListProviderRegionsItemTiflashItems0 `json:"tiflash"`

	// The list of TiKV specifications in the region.
	Tikv []*OpenapiListProviderRegionsItemTikvItems0 `json:"tikv"`
}

// Validate validates this openapi list provider regions item
func (m *OpenapiListProviderRegionsItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTidb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiflash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTikv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var openapiListProviderRegionsItemTypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListProviderRegionsItemTypeCloudProviderPropEnum = append(openapiListProviderRegionsItemTypeCloudProviderPropEnum, v)
	}
}

const (

	// OpenapiListProviderRegionsItemCloudProviderAWS captures enum value "AWS"
	OpenapiListProviderRegionsItemCloudProviderAWS string = "AWS"

	// OpenapiListProviderRegionsItemCloudProviderGCP captures enum value "GCP"
	OpenapiListProviderRegionsItemCloudProviderGCP string = "GCP"
)

// prop value enum
func (m *OpenapiListProviderRegionsItem) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListProviderRegionsItemTypeCloudProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListProviderRegionsItem) validateCloudProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudProviderEnum("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

var openapiListProviderRegionsItemTypeClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEDICATED","DEVELOPER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListProviderRegionsItemTypeClusterTypePropEnum = append(openapiListProviderRegionsItemTypeClusterTypePropEnum, v)
	}
}

const (

	// OpenapiListProviderRegionsItemClusterTypeDEDICATED captures enum value "DEDICATED"
	OpenapiListProviderRegionsItemClusterTypeDEDICATED string = "DEDICATED"

	// OpenapiListProviderRegionsItemClusterTypeDEVELOPER captures enum value "DEVELOPER"
	OpenapiListProviderRegionsItemClusterTypeDEVELOPER string = "DEVELOPER"
)

// prop value enum
func (m *OpenapiListProviderRegionsItem) validateClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, openapiListProviderRegionsItemTypeClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OpenapiListProviderRegionsItem) validateClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterTypeEnum("cluster_type", "body", m.ClusterType); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiListProviderRegionsItem) validateTidb(formats strfmt.Registry) error {
	if swag.IsZero(m.Tidb) { // not required
		return nil
	}

	for i := 0; i < len(m.Tidb); i++ {
		if swag.IsZero(m.Tidb[i]) { // not required
			continue
		}

		if m.Tidb[i] != nil {
			if err := m.Tidb[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tidb" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tidb" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenapiListProviderRegionsItem) validateTiflash(formats strfmt.Registry) error {
	if swag.IsZero(m.Tiflash) { // not required
		return nil
	}

	for i := 0; i < len(m.Tiflash); i++ {
		if swag.IsZero(m.Tiflash[i]) { // not required
			continue
		}

		if m.Tiflash[i] != nil {
			if err := m.Tiflash[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tiflash" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tiflash" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenapiListProviderRegionsItem) validateTikv(formats strfmt.Registry) error {
	if swag.IsZero(m.Tikv) { // not required
		return nil
	}

	for i := 0; i < len(m.Tikv); i++ {
		if swag.IsZero(m.Tikv[i]) { // not required
			continue
		}

		if m.Tikv[i] != nil {
			if err := m.Tikv[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tikv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tikv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi list provider regions item based on the context it is used
func (m *OpenapiListProviderRegionsItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTidb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTiflash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTikv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItem) contextValidateTidb(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tidb); i++ {

		if m.Tidb[i] != nil {

			if swag.IsZero(m.Tidb[i]) { // not required
				return nil
			}

			if err := m.Tidb[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tidb" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tidb" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenapiListProviderRegionsItem) contextValidateTiflash(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tiflash); i++ {

		if m.Tiflash[i] != nil {

			if swag.IsZero(m.Tiflash[i]) { // not required
				return nil
			}

			if err := m.Tiflash[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tiflash" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tiflash" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenapiListProviderRegionsItem) contextValidateTikv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tikv); i++ {

		if m.Tikv[i] != nil {

			if swag.IsZero(m.Tikv[i]) { // not required
				return nil
			}

			if err := m.Tikv[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tikv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tikv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItem) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTidbItems0 openapi list provider regions item tidb items0
//
// swagger:model OpenapiListProviderRegionsItemTidbItems0
type OpenapiListProviderRegionsItemTidbItems0 struct {

	// node quantity range
	NodeQuantityRange *OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange `json:"node_quantity_range,omitempty"`

	// The size of the TiDB component in the cluster.
	// Example: 8C16G
	NodeSize string `json:"node_size,omitempty"`
}

// Validate validates this openapi list provider regions item tidb items0
func (m *OpenapiListProviderRegionsItemTidbItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeQuantityRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItemTidbItems0) validateNodeQuantityRange(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeQuantityRange) { // not required
		return nil
	}

	if m.NodeQuantityRange != nil {
		if err := m.NodeQuantityRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_quantity_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_quantity_range")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openapi list provider regions item tidb items0 based on the context it is used
func (m *OpenapiListProviderRegionsItemTidbItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeQuantityRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItemTidbItems0) contextValidateNodeQuantityRange(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeQuantityRange != nil {

		if swag.IsZero(m.NodeQuantityRange) { // not required
			return nil
		}

		if err := m.NodeQuantityRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_quantity_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_quantity_range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTidbItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTidbItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTidbItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange The range and step of node quantity of the TiDB component in the cluster.
//
// swagger:model OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange
type OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange struct {

	// The minimum node quantity of the component in the cluster.
	Min int32 `json:"min,omitempty"`

	// The step of node quantity of the component in the cluster.
	Step int32 `json:"step,omitempty"`
}

// Validate validates this openapi list provider regions item tidb items0 node quantity range
func (m *OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openapi list provider regions item tidb items0 node quantity range based on context it is used
func (m *OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTidbItems0NodeQuantityRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTiflashItems0 openapi list provider regions item tiflash items0
//
// swagger:model OpenapiListProviderRegionsItemTiflashItems0
type OpenapiListProviderRegionsItemTiflashItems0 struct {

	// node quantity range
	NodeQuantityRange *OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange `json:"node_quantity_range,omitempty"`

	// The size of the TiFlash component in the cluster.
	// Example: 8C64G
	NodeSize string `json:"node_size,omitempty"`

	// storage size gib range
	StorageSizeGibRange *OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange `json:"storage_size_gib_range,omitempty"`
}

// Validate validates this openapi list provider regions item tiflash items0
func (m *OpenapiListProviderRegionsItemTiflashItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeQuantityRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageSizeGibRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItemTiflashItems0) validateNodeQuantityRange(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeQuantityRange) { // not required
		return nil
	}

	if m.NodeQuantityRange != nil {
		if err := m.NodeQuantityRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_quantity_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_quantity_range")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiListProviderRegionsItemTiflashItems0) validateStorageSizeGibRange(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageSizeGibRange) { // not required
		return nil
	}

	if m.StorageSizeGibRange != nil {
		if err := m.StorageSizeGibRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_size_gib_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_size_gib_range")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openapi list provider regions item tiflash items0 based on the context it is used
func (m *OpenapiListProviderRegionsItemTiflashItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeQuantityRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageSizeGibRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItemTiflashItems0) contextValidateNodeQuantityRange(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeQuantityRange != nil {

		if swag.IsZero(m.NodeQuantityRange) { // not required
			return nil
		}

		if err := m.NodeQuantityRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_quantity_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_quantity_range")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiListProviderRegionsItemTiflashItems0) contextValidateStorageSizeGibRange(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageSizeGibRange != nil {

		if swag.IsZero(m.StorageSizeGibRange) { // not required
			return nil
		}

		if err := m.StorageSizeGibRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_size_gib_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_size_gib_range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTiflashItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTiflashItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTiflashItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange The range and step of node quantity of the TiFlash component in the cluster.
//
// swagger:model OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange
type OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange struct {

	// The minimum node quantity of the component in the cluster.
	Min int32 `json:"min,omitempty"`

	// The step of node quantity of the component in the cluster.
	Step int32 `json:"step,omitempty"`
}

// Validate validates this openapi list provider regions item tiflash items0 node quantity range
func (m *OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openapi list provider regions item tiflash items0 node quantity range based on context it is used
func (m *OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTiflashItems0NodeQuantityRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange The storage size range for each node of the TiFlash component in the cluster.
//
// swagger:model OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange
type OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange struct {

	// The maximum storage size for each node of the component in the cluster.
	Max int32 `json:"max,omitempty"`

	// The minimum storage size for each node of the component in the cluster.
	Min int32 `json:"min,omitempty"`
}

// Validate validates this openapi list provider regions item tiflash items0 storage size gib range
func (m *OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openapi list provider regions item tiflash items0 storage size gib range based on context it is used
func (m *OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTiflashItems0StorageSizeGibRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTikvItems0 openapi list provider regions item tikv items0
//
// swagger:model OpenapiListProviderRegionsItemTikvItems0
type OpenapiListProviderRegionsItemTikvItems0 struct {

	// node quantity range
	NodeQuantityRange *OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange `json:"node_quantity_range,omitempty"`

	// The size of the TiKV component in the cluster.
	// Example: 8C32G
	NodeSize string `json:"node_size,omitempty"`

	// storage size gib range
	StorageSizeGibRange *OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange `json:"storage_size_gib_range,omitempty"`
}

// Validate validates this openapi list provider regions item tikv items0
func (m *OpenapiListProviderRegionsItemTikvItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeQuantityRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageSizeGibRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItemTikvItems0) validateNodeQuantityRange(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeQuantityRange) { // not required
		return nil
	}

	if m.NodeQuantityRange != nil {
		if err := m.NodeQuantityRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_quantity_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_quantity_range")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiListProviderRegionsItemTikvItems0) validateStorageSizeGibRange(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageSizeGibRange) { // not required
		return nil
	}

	if m.StorageSizeGibRange != nil {
		if err := m.StorageSizeGibRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_size_gib_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_size_gib_range")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openapi list provider regions item tikv items0 based on the context it is used
func (m *OpenapiListProviderRegionsItemTikvItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeQuantityRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageSizeGibRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProviderRegionsItemTikvItems0) contextValidateNodeQuantityRange(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeQuantityRange != nil {

		if swag.IsZero(m.NodeQuantityRange) { // not required
			return nil
		}

		if err := m.NodeQuantityRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_quantity_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_quantity_range")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiListProviderRegionsItemTikvItems0) contextValidateStorageSizeGibRange(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageSizeGibRange != nil {

		if swag.IsZero(m.StorageSizeGibRange) { // not required
			return nil
		}

		if err := m.StorageSizeGibRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_size_gib_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_size_gib_range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTikvItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTikvItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTikvItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange The range and step of node quantity of the TiKV component in the cluster.
//
// swagger:model OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange
type OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange struct {

	// The minimum node quantity of the component in the cluster.
	Min int32 `json:"min,omitempty"`

	// The step of node quantity of the component in the cluster.
	Step int32 `json:"step,omitempty"`
}

// Validate validates this openapi list provider regions item tikv items0 node quantity range
func (m *OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openapi list provider regions item tikv items0 node quantity range based on context it is used
func (m *OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTikvItems0NodeQuantityRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange The storage size range for each node of the TiKV component in the cluster.
//
// swagger:model OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange
type OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange struct {

	// The maximum storage size for each node of the component in the cluster.
	Max int32 `json:"max,omitempty"`

	// The minimum storage size for each node of the component in the cluster.
	Min int32 `json:"min,omitempty"`
}

// Validate validates this openapi list provider regions item tikv items0 storage size gib range
func (m *OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openapi list provider regions item tikv items0 storage size gib range based on context it is used
func (m *OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange) UnmarshalBinary(b []byte) error {
	var res OpenapiListProviderRegionsItemTikvItems0StorageSizeGibRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
