// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiTablePreview TablePreview
//
// TablePreview is the preview result for a single table.
//
// swagger:model openapiTablePreview
type OpenapiTablePreview struct {

	// data preview
	// Required: true
	DataPreview *OpenapiTablePreviewDataPreview `json:"data_preview"`

	// The database name of the preview table.
	// Example: db01
	// Required: true
	DatabaseName *string `json:"database_name"`

	// schema preview
	SchemaPreview *OpenapiTablePreviewSchemaPreview `json:"schema_preview,omitempty"`

	// The table name of the preview table.
	// Example: table01
	// Required: true
	TableName *string `json:"table_name"`
}

// Validate validates this openapi table preview
func (m *OpenapiTablePreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataPreview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaPreview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreview) validateDataPreview(formats strfmt.Registry) error {

	if err := validate.Required("data_preview", "body", m.DataPreview); err != nil {
		return err
	}

	if m.DataPreview != nil {
		if err := m.DataPreview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiTablePreview) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("database_name", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiTablePreview) validateSchemaPreview(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaPreview) { // not required
		return nil
	}

	if m.SchemaPreview != nil {
		if err := m.SchemaPreview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiTablePreview) validateTableName(formats strfmt.Registry) error {

	if err := validate.Required("table_name", "body", m.TableName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openapi table preview based on the context it is used
func (m *OpenapiTablePreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataPreview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaPreview(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreview) contextValidateDataPreview(ctx context.Context, formats strfmt.Registry) error {

	if m.DataPreview != nil {

		if err := m.DataPreview.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_preview")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiTablePreview) contextValidateSchemaPreview(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemaPreview != nil {

		if swag.IsZero(m.SchemaPreview) { // not required
			return nil
		}

		if err := m.SchemaPreview.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_preview")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_preview")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiTablePreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiTablePreview) UnmarshalBinary(b []byte) error {
	var res OpenapiTablePreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiTablePreviewDataPreview TableData
//
// The data sample for the preview table.
//
// swagger:model OpenapiTablePreviewDataPreview
type OpenapiTablePreviewDataPreview struct {

	// The column names for the following data samples from a table.
	// Example: ["id","column01"]
	ColumnNames []string `json:"column_names"`

	// The rows sampled from a table.
	// Required: true
	Rows []*OpenapiTablePreviewDataPreviewRowsItems0 `json:"rows"`
}

// Validate validates this openapi table preview data preview
func (m *OpenapiTablePreviewDataPreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreviewDataPreview) validateRows(formats strfmt.Registry) error {

	if err := validate.Required("data_preview"+"."+"rows", "body", m.Rows); err != nil {
		return err
	}

	for i := 0; i < len(m.Rows); i++ {
		if swag.IsZero(m.Rows[i]) { // not required
			continue
		}

		if m.Rows[i] != nil {
			if err := m.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi table preview data preview based on the context it is used
func (m *OpenapiTablePreviewDataPreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreviewDataPreview) contextValidateRows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rows); i++ {

		if m.Rows[i] != nil {

			if swag.IsZero(m.Rows[i]) { // not required
				return nil
			}

			if err := m.Rows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data_preview" + "." + "rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiTablePreviewDataPreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiTablePreviewDataPreview) UnmarshalBinary(b []byte) error {
	var res OpenapiTablePreviewDataPreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiTablePreviewDataPreviewRowsItems0 TableDataRow
//
// TableDataRow is a single row in a table.
//
// swagger:model OpenapiTablePreviewDataPreviewRowsItems0
type OpenapiTablePreviewDataPreviewRowsItems0 struct {

	// The columns extracted from a table row.
	// Example: ["1","abc"]
	// Required: true
	Columns []string `json:"columns"`
}

// Validate validates this openapi table preview data preview rows items0
func (m *OpenapiTablePreviewDataPreviewRowsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreviewDataPreviewRowsItems0) validateColumns(formats strfmt.Registry) error {

	if err := validate.Required("columns", "body", m.Columns); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi table preview data preview rows items0 based on context it is used
func (m *OpenapiTablePreviewDataPreviewRowsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiTablePreviewDataPreviewRowsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiTablePreviewDataPreviewRowsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiTablePreviewDataPreviewRowsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiTablePreviewSchemaPreview TableSchema
//
// The schema for the preview table.
//
// swagger:model OpenapiTablePreviewSchemaPreview
type OpenapiTablePreviewSchemaPreview struct {

	// The column definition for each column in the table.
	// Example: [{"column_name":"id","column_type":"INTEGER"},{"column_name":"column01","column_type":"VARCHAR(255)"}]
	// Required: true
	ColumnDefinitions []*OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0 `json:"column_definitions"`

	// The primary key column names for the table. This is optional. The primary key is taken into account when the table is pre-created before an import task is started.
	// Example: ["id"]
	PrimaryKeyColumns []string `json:"primary_key_columns"`
}

// Validate validates this openapi table preview schema preview
func (m *OpenapiTablePreviewSchemaPreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreviewSchemaPreview) validateColumnDefinitions(formats strfmt.Registry) error {

	if err := validate.Required("schema_preview"+"."+"column_definitions", "body", m.ColumnDefinitions); err != nil {
		return err
	}

	for i := 0; i < len(m.ColumnDefinitions); i++ {
		if swag.IsZero(m.ColumnDefinitions[i]) { // not required
			continue
		}

		if m.ColumnDefinitions[i] != nil {
			if err := m.ColumnDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this openapi table preview schema preview based on the context it is used
func (m *OpenapiTablePreviewSchemaPreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColumnDefinitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreviewSchemaPreview) contextValidateColumnDefinitions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ColumnDefinitions); i++ {

		if m.ColumnDefinitions[i] != nil {

			if swag.IsZero(m.ColumnDefinitions[i]) { // not required
				return nil
			}

			if err := m.ColumnDefinitions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schema_preview" + "." + "column_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiTablePreviewSchemaPreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiTablePreviewSchemaPreview) UnmarshalBinary(b []byte) error {
	var res OpenapiTablePreviewSchemaPreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0 ColumnDefinition
//
// ColumnDefinition is the definition of a column in a table.
//
// swagger:model OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0
type OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0 struct {

	// The column name.
	// Example: column01
	// Required: true
	ColumnName *string `json:"column_name"`

	// The column type.
	// Example: VARCHAR(255)
	// Required: true
	ColumnType *string `json:"column_type"`
}

// Validate validates this openapi table preview schema preview column definitions items0
func (m *OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColumnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0) validateColumnName(formats strfmt.Registry) error {

	if err := validate.Required("column_name", "body", m.ColumnName); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0) validateColumnType(formats strfmt.Registry) error {

	if err := validate.Required("column_type", "body", m.ColumnType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this openapi table preview schema preview column definitions items0 based on context it is used
func (m *OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiTablePreviewSchemaPreviewColumnDefinitionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
