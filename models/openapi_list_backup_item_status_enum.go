// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenapiListBackupItemStatusEnum openapi list backup item status enum
//
// swagger:model openapiListBackupItemStatusEnum
type OpenapiListBackupItemStatusEnum string

func NewOpenapiListBackupItemStatusEnum(value OpenapiListBackupItemStatusEnum) *OpenapiListBackupItemStatusEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpenapiListBackupItemStatusEnum.
func (m OpenapiListBackupItemStatusEnum) Pointer() *OpenapiListBackupItemStatusEnum {
	return &m
}

const (

	// OpenapiListBackupItemStatusEnumPENDING captures enum value "PENDING"
	OpenapiListBackupItemStatusEnumPENDING OpenapiListBackupItemStatusEnum = "PENDING"

	// OpenapiListBackupItemStatusEnumRUNNING captures enum value "RUNNING"
	OpenapiListBackupItemStatusEnumRUNNING OpenapiListBackupItemStatusEnum = "RUNNING"

	// OpenapiListBackupItemStatusEnumFAILED captures enum value "FAILED"
	OpenapiListBackupItemStatusEnumFAILED OpenapiListBackupItemStatusEnum = "FAILED"

	// OpenapiListBackupItemStatusEnumSUCCESS captures enum value "SUCCESS"
	OpenapiListBackupItemStatusEnumSUCCESS OpenapiListBackupItemStatusEnum = "SUCCESS"
)

// for schema
var openapiListBackupItemStatusEnumEnum []interface{}

func init() {
	var res []OpenapiListBackupItemStatusEnum
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","FAILED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiListBackupItemStatusEnumEnum = append(openapiListBackupItemStatusEnumEnum, v)
	}
}

func (m OpenapiListBackupItemStatusEnum) validateOpenapiListBackupItemStatusEnumEnum(path, location string, value OpenapiListBackupItemStatusEnum) error {
	if err := validate.EnumCase(path, location, value, openapiListBackupItemStatusEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openapi list backup item status enum
func (m OpenapiListBackupItemStatusEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenapiListBackupItemStatusEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openapi list backup item status enum based on context it is used
func (m OpenapiListBackupItemStatusEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
