// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiListProjectsResp GetProjectsResp
//
// GetProjectsResp is the response for getting accessible projects.
//
// swagger:model openapiListProjectsResp
type OpenapiListProjectsResp struct {

	// The items of accessible projects.
	// Required: true
	Items []*OpenapiListProjectsRespItemsItems0 `json:"items"`

	// The total number of accessible projects.
	// Example: 1
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this openapi list projects resp
func (m *OpenapiListProjectsResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProjectsResp) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenapiListProjectsResp) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openapi list projects resp based on the context it is used
func (m *OpenapiListProjectsResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiListProjectsResp) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProjectsResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProjectsResp) UnmarshalBinary(b []byte) error {
	var res OpenapiListProjectsResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OpenapiListProjectsRespItemsItems0 ListProjectItem
//
// ListProjectItem is the item of projects.
//
// swagger:model OpenapiListProjectsRespItemsItems0
type OpenapiListProjectsRespItemsItems0 struct {

	// The number of TiDB Cloud clusters deployed in the project.
	// Example: 4
	ClusterCount int64 `json:"cluster_count,omitempty"`

	// The creation time of the cluster in Unix timestamp seconds (epoch time).
	// Example: 1656991448
	CreateTimestamp string `json:"create_timestamp,omitempty"`

	// The ID of the project.
	// Example: 1
	ID string `json:"id,omitempty"`

	// The name of the project.
	// Example: default_project
	Name string `json:"name,omitempty"`

	// The ID of the TiDB Cloud organization to which the project belongs.
	// Example: 1
	OrgID string `json:"org_id,omitempty"`

	// The number of users in the project.
	// Example: 10
	UserCount int64 `json:"user_count,omitempty"`
}

// Validate validates this openapi list projects resp items items0
func (m *OpenapiListProjectsRespItemsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openapi list projects resp items items0 based on context it is used
func (m *OpenapiListProjectsRespItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiListProjectsRespItemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiListProjectsRespItemsItems0) UnmarshalBinary(b []byte) error {
	var res OpenapiListProjectsRespItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
