// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAccesspointsReader is a Reader for the ListAccesspoints structure.
type ListAccesspointsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAccesspointsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAccesspointsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAccesspointsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAccesspointsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAccesspointsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListAccesspointsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListAccesspointsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAccesspointsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListAccesspointsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAccesspointsOK creates a ListAccesspointsOK with default headers values
func NewListAccesspointsOK() *ListAccesspointsOK {
	return &ListAccesspointsOK{}
}

/*
ListAccesspointsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListAccesspointsOK struct {
	Payload *ListAccesspointsOKBody
}

// IsSuccess returns true when this list accesspoints o k response has a 2xx status code
func (o *ListAccesspointsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list accesspoints o k response has a 3xx status code
func (o *ListAccesspointsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints o k response has a 4xx status code
func (o *ListAccesspointsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list accesspoints o k response has a 5xx status code
func (o *ListAccesspointsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list accesspoints o k response a status code equal to that given
func (o *ListAccesspointsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list accesspoints o k response
func (o *ListAccesspointsOK) Code() int {
	return 200
}

func (o *ListAccesspointsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsOK %s", 200, payload)
}

func (o *ListAccesspointsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsOK %s", 200, payload)
}

func (o *ListAccesspointsOK) GetPayload() *ListAccesspointsOKBody {
	return o.Payload
}

func (o *ListAccesspointsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsBadRequest creates a ListAccesspointsBadRequest with default headers values
func NewListAccesspointsBadRequest() *ListAccesspointsBadRequest {
	return &ListAccesspointsBadRequest{}
}

/*
ListAccesspointsBadRequest describes a response with status code 400, with default header values.

A request field is invalid.
*/
type ListAccesspointsBadRequest struct {
	Payload *ListAccesspointsBadRequestBody
}

// IsSuccess returns true when this list accesspoints bad request response has a 2xx status code
func (o *ListAccesspointsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list accesspoints bad request response has a 3xx status code
func (o *ListAccesspointsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints bad request response has a 4xx status code
func (o *ListAccesspointsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list accesspoints bad request response has a 5xx status code
func (o *ListAccesspointsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list accesspoints bad request response a status code equal to that given
func (o *ListAccesspointsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list accesspoints bad request response
func (o *ListAccesspointsBadRequest) Code() int {
	return 400
}

func (o *ListAccesspointsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsBadRequest %s", 400, payload)
}

func (o *ListAccesspointsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsBadRequest %s", 400, payload)
}

func (o *ListAccesspointsBadRequest) GetPayload() *ListAccesspointsBadRequestBody {
	return o.Payload
}

func (o *ListAccesspointsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsUnauthorized creates a ListAccesspointsUnauthorized with default headers values
func NewListAccesspointsUnauthorized() *ListAccesspointsUnauthorized {
	return &ListAccesspointsUnauthorized{}
}

/*
ListAccesspointsUnauthorized describes a response with status code 401, with default header values.

The API key cannot be authenticated.
*/
type ListAccesspointsUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this list accesspoints unauthorized response has a 2xx status code
func (o *ListAccesspointsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list accesspoints unauthorized response has a 3xx status code
func (o *ListAccesspointsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints unauthorized response has a 4xx status code
func (o *ListAccesspointsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list accesspoints unauthorized response has a 5xx status code
func (o *ListAccesspointsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list accesspoints unauthorized response a status code equal to that given
func (o *ListAccesspointsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list accesspoints unauthorized response
func (o *ListAccesspointsUnauthorized) Code() int {
	return 401
}

func (o *ListAccesspointsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsUnauthorized %s", 401, payload)
}

func (o *ListAccesspointsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsUnauthorized %s", 401, payload)
}

func (o *ListAccesspointsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ListAccesspointsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsForbidden creates a ListAccesspointsForbidden with default headers values
func NewListAccesspointsForbidden() *ListAccesspointsForbidden {
	return &ListAccesspointsForbidden{}
}

/*
ListAccesspointsForbidden describes a response with status code 403, with default header values.

The API key does not have permission to access the resource.
*/
type ListAccesspointsForbidden struct {
	Payload *ListAccesspointsForbiddenBody
}

// IsSuccess returns true when this list accesspoints forbidden response has a 2xx status code
func (o *ListAccesspointsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list accesspoints forbidden response has a 3xx status code
func (o *ListAccesspointsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints forbidden response has a 4xx status code
func (o *ListAccesspointsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list accesspoints forbidden response has a 5xx status code
func (o *ListAccesspointsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list accesspoints forbidden response a status code equal to that given
func (o *ListAccesspointsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list accesspoints forbidden response
func (o *ListAccesspointsForbidden) Code() int {
	return 403
}

func (o *ListAccesspointsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsForbidden %s", 403, payload)
}

func (o *ListAccesspointsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsForbidden %s", 403, payload)
}

func (o *ListAccesspointsForbidden) GetPayload() *ListAccesspointsForbiddenBody {
	return o.Payload
}

func (o *ListAccesspointsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsNotFound creates a ListAccesspointsNotFound with default headers values
func NewListAccesspointsNotFound() *ListAccesspointsNotFound {
	return &ListAccesspointsNotFound{}
}

/*
ListAccesspointsNotFound describes a response with status code 404, with default header values.

The requested resource does not exist.
*/
type ListAccesspointsNotFound struct {
	Payload *ListAccesspointsNotFoundBody
}

// IsSuccess returns true when this list accesspoints not found response has a 2xx status code
func (o *ListAccesspointsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list accesspoints not found response has a 3xx status code
func (o *ListAccesspointsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints not found response has a 4xx status code
func (o *ListAccesspointsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list accesspoints not found response has a 5xx status code
func (o *ListAccesspointsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list accesspoints not found response a status code equal to that given
func (o *ListAccesspointsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list accesspoints not found response
func (o *ListAccesspointsNotFound) Code() int {
	return 404
}

func (o *ListAccesspointsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsNotFound %s", 404, payload)
}

func (o *ListAccesspointsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsNotFound %s", 404, payload)
}

func (o *ListAccesspointsNotFound) GetPayload() *ListAccesspointsNotFoundBody {
	return o.Payload
}

func (o *ListAccesspointsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsTooManyRequests creates a ListAccesspointsTooManyRequests with default headers values
func NewListAccesspointsTooManyRequests() *ListAccesspointsTooManyRequests {
	return &ListAccesspointsTooManyRequests{}
}

/*
ListAccesspointsTooManyRequests describes a response with status code 429, with default header values.

You have exceed the rate limit.
*/
type ListAccesspointsTooManyRequests struct {
	Payload *ListAccesspointsTooManyRequestsBody
}

// IsSuccess returns true when this list accesspoints too many requests response has a 2xx status code
func (o *ListAccesspointsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list accesspoints too many requests response has a 3xx status code
func (o *ListAccesspointsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints too many requests response has a 4xx status code
func (o *ListAccesspointsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list accesspoints too many requests response has a 5xx status code
func (o *ListAccesspointsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list accesspoints too many requests response a status code equal to that given
func (o *ListAccesspointsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list accesspoints too many requests response
func (o *ListAccesspointsTooManyRequests) Code() int {
	return 429
}

func (o *ListAccesspointsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsTooManyRequests %s", 429, payload)
}

func (o *ListAccesspointsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsTooManyRequests %s", 429, payload)
}

func (o *ListAccesspointsTooManyRequests) GetPayload() *ListAccesspointsTooManyRequestsBody {
	return o.Payload
}

func (o *ListAccesspointsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsInternalServerError creates a ListAccesspointsInternalServerError with default headers values
func NewListAccesspointsInternalServerError() *ListAccesspointsInternalServerError {
	return &ListAccesspointsInternalServerError{}
}

/*
ListAccesspointsInternalServerError describes a response with status code 500, with default header values.

Server error.
*/
type ListAccesspointsInternalServerError struct {
	Payload *ListAccesspointsInternalServerErrorBody
}

// IsSuccess returns true when this list accesspoints internal server error response has a 2xx status code
func (o *ListAccesspointsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list accesspoints internal server error response has a 3xx status code
func (o *ListAccesspointsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list accesspoints internal server error response has a 4xx status code
func (o *ListAccesspointsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list accesspoints internal server error response has a 5xx status code
func (o *ListAccesspointsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list accesspoints internal server error response a status code equal to that given
func (o *ListAccesspointsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list accesspoints internal server error response
func (o *ListAccesspointsInternalServerError) Code() int {
	return 500
}

func (o *ListAccesspointsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsInternalServerError %s", 500, payload)
}

func (o *ListAccesspointsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] listAccesspointsInternalServerError %s", 500, payload)
}

func (o *ListAccesspointsInternalServerError) GetPayload() *ListAccesspointsInternalServerErrorBody {
	return o.Payload
}

func (o *ListAccesspointsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAccesspointsDefault creates a ListAccesspointsDefault with default headers values
func NewListAccesspointsDefault(code int) *ListAccesspointsDefault {
	return &ListAccesspointsDefault{
		_statusCode: code,
	}
}

/*
ListAccesspointsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListAccesspointsDefault struct {
	_statusCode int

	Payload *ListAccesspointsDefaultBody
}

// IsSuccess returns true when this list accesspoints default response has a 2xx status code
func (o *ListAccesspointsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list accesspoints default response has a 3xx status code
func (o *ListAccesspointsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list accesspoints default response has a 4xx status code
func (o *ListAccesspointsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list accesspoints default response has a 5xx status code
func (o *ListAccesspointsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list accesspoints default response a status code equal to that given
func (o *ListAccesspointsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list accesspoints default response
func (o *ListAccesspointsDefault) Code() int {
	return o._statusCode
}

func (o *ListAccesspointsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] ListAccesspoints default %s", o._statusCode, payload)
}

func (o *ListAccesspointsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/accesspoints][%d] ListAccesspoints default %s", o._statusCode, payload)
}

func (o *ListAccesspointsDefault) GetPayload() *ListAccesspointsDefaultBody {
	return o.Payload
}

func (o *ListAccesspointsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAccesspointsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListAccesspointsBadRequestBody list accesspoints bad request body
swagger:model ListAccesspointsBadRequestBody
*/
type ListAccesspointsBadRequestBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list accesspoints bad request body
func (o *ListAccesspointsBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints bad request body based on context it is used
func (o *ListAccesspointsBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsDefaultBody list accesspoints default body
swagger:model ListAccesspointsDefaultBody
*/
type ListAccesspointsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ListAccesspointsDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this list accesspoints default body
func (o *ListAccesspointsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAccesspoints default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListAccesspoints default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list accesspoints default body based on the context it is used
func (o *ListAccesspointsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAccesspoints default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListAccesspoints default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsDefaultBodyDetailsItems0 list accesspoints default body details items0
swagger:model ListAccesspointsDefaultBodyDetailsItems0
*/
type ListAccesspointsDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// list accesspoints default body details items0
	ListAccesspointsDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *ListAccesspointsDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ListAccesspointsDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.ListAccesspointsDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o ListAccesspointsDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.ListAccesspointsDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.ListAccesspointsDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this list accesspoints default body details items0
func (o *ListAccesspointsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints default body details items0 based on context it is used
func (o *ListAccesspointsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsForbiddenBody list accesspoints forbidden body
swagger:model ListAccesspointsForbiddenBody
*/
type ListAccesspointsForbiddenBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list accesspoints forbidden body
func (o *ListAccesspointsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints forbidden body based on context it is used
func (o *ListAccesspointsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsInternalServerErrorBody list accesspoints internal server error body
swagger:model ListAccesspointsInternalServerErrorBody
*/
type ListAccesspointsInternalServerErrorBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list accesspoints internal server error body
func (o *ListAccesspointsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints internal server error body based on context it is used
func (o *ListAccesspointsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsNotFoundBody list accesspoints not found body
swagger:model ListAccesspointsNotFoundBody
*/
type ListAccesspointsNotFoundBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list accesspoints not found body
func (o *ListAccesspointsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints not found body based on context it is used
func (o *ListAccesspointsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBody ListAccesspointsResp
//
// ListAccesspointsResp is the response for listing accesspoints for a cluster.
swagger:model ListAccesspointsOKBody
*/
type ListAccesspointsOKBody struct {

	// The accesspoints for the cluster.
	// Required: true
	Items []*ListAccesspointsOKBodyItemsItems0 `json:"items"`

	// The total number of accesspoints.
	// Example: 1
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this list accesspoints o k body
func (o *ListAccesspointsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBody) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("listAccesspointsOK"+"."+"items", "body", o.Items); err != nil {
		return err
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAccesspointsOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAccesspointsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAccesspointsOKBody) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("listAccesspointsOK"+"."+"total", "body", o.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list accesspoints o k body based on the context it is used
func (o *ListAccesspointsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {

			if swag.IsZero(o.Items[i]) { // not required
				return nil
			}

			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAccesspointsOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAccesspointsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBodyItemsItems0 Accesspoint
//
// Accesspoint
swagger:model ListAccesspointsOKBodyItemsItems0
*/
type ListAccesspointsOKBodyItemsItems0 struct {

	// The ID of the cluster.
	// Example: 1
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The display name of the accesspoint. The name must be 4-64 characters that can only include numbers, letters, and hyphens, and the first and last character must be a letter or number.
	// Example: Accesspoint
	// Required: true
	// Pattern: ^[A-Za-z0-9][-A-Za-z0-9]{2,62}[A-Za-z0-9]$
	DisplayName *string `json:"display_name"`

	// The ID of the accesspoint.
	// Example: 1
	// Required: true
	ID *string `json:"id"`

	// private endpoint
	PrivateEndpoint *ListAccesspointsOKBodyItemsItems0PrivateEndpoint `json:"private_endpoint,omitempty"`

	// The ID of the project. You can get the project ID from the response of [List all accessible projects](#tag/Project/operation/ListProjects).
	// Example: 1
	// Required: true
	ProjectID *string `json:"project_id"`

	// public endpoint
	PublicEndpoint *ListAccesspointsOKBodyItemsItems0PublicEndpoint `json:"public_endpoint,omitempty"`

	// The number of tidb nodes in the accesspoint.
	// Example: 2
	TidbNodeQuantity int32 `json:"tidb_node_quantity,omitempty"`

	// vpc peering endpoint
	VpcPeeringEndpoint *ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint `json:"vpc_peering_endpoint,omitempty"`
}

// Validate validates this list accesspoints o k body items items0
func (o *ListAccesspointsOKBodyItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrivateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVpcPeeringEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", o.ClusterID); err != nil {
		return err
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", o.DisplayName); err != nil {
		return err
	}

	if err := validate.Pattern("display_name", "body", *o.DisplayName, `^[A-Za-z0-9][-A-Za-z0-9]{2,62}[A-Za-z0-9]$`); err != nil {
		return err
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validatePrivateEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(o.PrivateEndpoint) { // not required
		return nil
	}

	if o.PrivateEndpoint != nil {
		if err := o.PrivateEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_endpoint")
			}
			return err
		}
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", o.ProjectID); err != nil {
		return err
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validatePublicEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(o.PublicEndpoint) { // not required
		return nil
	}

	if o.PublicEndpoint != nil {
		if err := o.PublicEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("public_endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("public_endpoint")
			}
			return err
		}
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) validateVpcPeeringEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(o.VpcPeeringEndpoint) { // not required
		return nil
	}

	if o.VpcPeeringEndpoint != nil {
		if err := o.VpcPeeringEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_peering_endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_peering_endpoint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list accesspoints o k body items items0 based on the context it is used
func (o *ListAccesspointsOKBodyItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePrivateEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePublicEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVpcPeeringEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) contextValidatePrivateEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if o.PrivateEndpoint != nil {

		if swag.IsZero(o.PrivateEndpoint) { // not required
			return nil
		}

		if err := o.PrivateEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_endpoint")
			}
			return err
		}
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) contextValidatePublicEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if o.PublicEndpoint != nil {

		if swag.IsZero(o.PublicEndpoint) { // not required
			return nil
		}

		if err := o.PublicEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("public_endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("public_endpoint")
			}
			return err
		}
	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0) contextValidateVpcPeeringEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if o.VpcPeeringEndpoint != nil {

		if swag.IsZero(o.VpcPeeringEndpoint) { // not required
			return nil
		}

		if err := o.VpcPeeringEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_peering_endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_peering_endpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBodyItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBodyItemsItems0PrivateEndpoint The private endpoint.
swagger:model ListAccesspointsOKBodyItemsItems0PrivateEndpoint
*/
type ListAccesspointsOKBodyItemsItems0PrivateEndpoint struct {

	// Availability zones for the private endpoint service. This field is only applicable when the `cloud_provider` is `"AWS"`.
	// Example: ["usw2-az2","usw2-az1"]
	AzIds []string `json:"az_ids"`

	// The DNS name of the private endpoint service.
	// Example: privatelink-tidb.01234567890.clusters.tidb-cloud.com
	Host string `json:"host,omitempty"`

	// The port of the private endpoint service.
	// Example: 4000
	Port int32 `json:"port,omitempty"`

	// private link service
	PrivateLinkService *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService `json:"private_link_service,omitempty"`
}

// Validate validates this list accesspoints o k body items items0 private endpoint
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrivateLinkService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpoint) validatePrivateLinkService(formats strfmt.Registry) error {
	if swag.IsZero(o.PrivateLinkService) { // not required
		return nil
	}

	if o.PrivateLinkService != nil {
		if err := o.PrivateLinkService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_endpoint" + "." + "private_link_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_endpoint" + "." + "private_link_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list accesspoints o k body items items0 private endpoint based on the context it is used
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePrivateLinkService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpoint) contextValidatePrivateLinkService(ctx context.Context, formats strfmt.Registry) error {

	if o.PrivateLinkService != nil {

		if swag.IsZero(o.PrivateLinkService) { // not required
			return nil
		}

		if err := o.PrivateLinkService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_endpoint" + "." + "private_link_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_endpoint" + "." + "private_link_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpoint) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpoint) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBodyItemsItems0PrivateEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService The private endpoint service.
swagger:model ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService
*/
type ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService struct {

	// The name of the private endpoint service, which is used for connection.
	// Example: com.amazonaws.vpce.us-west-2.vpce-svc-01234567890123456
	ServiceName string `json:"service_name,omitempty"`

	// The status of the private endpoint service.
	// Example: ACTIVE
	// Enum: ["CREATING","ACTIVE","DELETING"]
	Status string `json:"status,omitempty"`
}

// Validate validates this list accesspoints o k body items items0 private endpoint private link service
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceTypeStatusPropEnum = append(listAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceTypeStatusPropEnum, v)
	}
}

const (

	// ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceStatusCREATING captures enum value "CREATING"
	ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceStatusCREATING string = "CREATING"

	// ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceStatusACTIVE captures enum value "ACTIVE"
	ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceStatusACTIVE string = "ACTIVE"

	// ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceStatusDELETING captures enum value "DELETING"
	ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceStatusDELETING string = "DELETING"
)

// prop value enum
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkServiceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("private_endpoint"+"."+"private_link_service"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list accesspoints o k body items items0 private endpoint private link service based on context it is used
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBodyItemsItems0PrivateEndpointPrivateLinkService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBodyItemsItems0PublicEndpoint The public endpoint.
swagger:model ListAccesspointsOKBodyItemsItems0PublicEndpoint
*/
type ListAccesspointsOKBodyItemsItems0PublicEndpoint struct {

	// The host of standard connection.
	// Example: tidb.f69f3808.acea1f2a.us-east-1.shared.aws.tidbcloud.com
	Host string `json:"host,omitempty"`

	// The IP allowlist for the public endpoint.
	IPAllowlist []*ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0 `json:"ip_allowlist"`

	// The TiDB port for connection. The port must be in the range of 1024-65535 except 10080.
	//
	// Example: 4000
	// Maximum: 65535
	// Minimum: 1024
	Port int32 `json:"port,omitempty"`
}

// Validate validates this list accesspoints o k body items items0 public endpoint
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPAllowlist(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) validateIPAllowlist(formats strfmt.Registry) error {
	if swag.IsZero(o.IPAllowlist) { // not required
		return nil
	}

	for i := 0; i < len(o.IPAllowlist); i++ {
		if swag.IsZero(o.IPAllowlist[i]) { // not required
			continue
		}

		if o.IPAllowlist[i] != nil {
			if err := o.IPAllowlist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("public_endpoint" + "." + "ip_allowlist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("public_endpoint" + "." + "ip_allowlist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(o.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("public_endpoint"+"."+"port", "body", int64(o.Port), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("public_endpoint"+"."+"port", "body", int64(o.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list accesspoints o k body items items0 public endpoint based on the context it is used
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPAllowlist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) contextValidateIPAllowlist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.IPAllowlist); i++ {

		if o.IPAllowlist[i] != nil {

			if swag.IsZero(o.IPAllowlist[i]) { // not required
				return nil
			}

			if err := o.IPAllowlist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("public_endpoint" + "." + "ip_allowlist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("public_endpoint" + "." + "ip_allowlist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpoint) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBodyItemsItems0PublicEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0 list accesspoints o k body items items0 public endpoint IP allowlist items0
swagger:model ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0
*/
type ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0 struct {

	// CIDR.
	// Example: 0.0.0.0/0
	Cidr string `json:"cidr,omitempty"`
}

// Validate validates this list accesspoints o k body items items0 public endpoint IP allowlist items0
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints o k body items items0 public endpoint IP allowlist items0 based on context it is used
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBodyItemsItems0PublicEndpointIPAllowlistItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint The VPC peering endpoint.
swagger:model ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint
*/
type ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint struct {

	// The host of VPC peering connection.
	// Example: private-tidb.f69f3808.acea1f2a.us-east-1.shared.aws.tidbcloud.com
	Host string `json:"host,omitempty"`

	// The TiDB port for connection. The port must be in the range of 1024-65535 except 10080.
	//
	// Example: 4000
	// Maximum: 65535
	// Minimum: 1024
	Port int32 `json:"port,omitempty"`
}

// Validate validates this list accesspoints o k body items items0 vpc peering endpoint
func (o *ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(o.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("vpc_peering_endpoint"+"."+"port", "body", int64(o.Port), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vpc_peering_endpoint"+"."+"port", "body", int64(o.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list accesspoints o k body items items0 vpc peering endpoint based on context it is used
func (o *ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsOKBodyItemsItems0VpcPeeringEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListAccesspointsTooManyRequestsBody list accesspoints too many requests body
swagger:model ListAccesspointsTooManyRequestsBody
*/
type ListAccesspointsTooManyRequestsBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list accesspoints too many requests body
func (o *ListAccesspointsTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list accesspoints too many requests body based on context it is used
func (o *ListAccesspointsTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAccesspointsTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAccesspointsTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res ListAccesspointsTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
