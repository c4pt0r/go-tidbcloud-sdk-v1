// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListClustersOfProjectReader is a Reader for the ListClustersOfProject structure.
type ListClustersOfProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListClustersOfProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListClustersOfProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListClustersOfProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListClustersOfProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListClustersOfProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListClustersOfProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListClustersOfProjectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListClustersOfProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListClustersOfProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListClustersOfProjectOK creates a ListClustersOfProjectOK with default headers values
func NewListClustersOfProjectOK() *ListClustersOfProjectOK {
	return &ListClustersOfProjectOK{}
}

/*
ListClustersOfProjectOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListClustersOfProjectOK struct {
	Payload *ListClustersOfProjectOKBody
}

// IsSuccess returns true when this list clusters of project o k response has a 2xx status code
func (o *ListClustersOfProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list clusters of project o k response has a 3xx status code
func (o *ListClustersOfProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project o k response has a 4xx status code
func (o *ListClustersOfProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list clusters of project o k response has a 5xx status code
func (o *ListClustersOfProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list clusters of project o k response a status code equal to that given
func (o *ListClustersOfProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list clusters of project o k response
func (o *ListClustersOfProjectOK) Code() int {
	return 200
}

func (o *ListClustersOfProjectOK) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectOK  %+v", 200, o.Payload)
}

func (o *ListClustersOfProjectOK) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectOK  %+v", 200, o.Payload)
}

func (o *ListClustersOfProjectOK) GetPayload() *ListClustersOfProjectOKBody {
	return o.Payload
}

func (o *ListClustersOfProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectBadRequest creates a ListClustersOfProjectBadRequest with default headers values
func NewListClustersOfProjectBadRequest() *ListClustersOfProjectBadRequest {
	return &ListClustersOfProjectBadRequest{}
}

/*
ListClustersOfProjectBadRequest describes a response with status code 400, with default header values.

A request field is invalid.
*/
type ListClustersOfProjectBadRequest struct {
	Payload *ListClustersOfProjectBadRequestBody
}

// IsSuccess returns true when this list clusters of project bad request response has a 2xx status code
func (o *ListClustersOfProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clusters of project bad request response has a 3xx status code
func (o *ListClustersOfProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project bad request response has a 4xx status code
func (o *ListClustersOfProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clusters of project bad request response has a 5xx status code
func (o *ListClustersOfProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list clusters of project bad request response a status code equal to that given
func (o *ListClustersOfProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list clusters of project bad request response
func (o *ListClustersOfProjectBadRequest) Code() int {
	return 400
}

func (o *ListClustersOfProjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectBadRequest  %+v", 400, o.Payload)
}

func (o *ListClustersOfProjectBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectBadRequest  %+v", 400, o.Payload)
}

func (o *ListClustersOfProjectBadRequest) GetPayload() *ListClustersOfProjectBadRequestBody {
	return o.Payload
}

func (o *ListClustersOfProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectUnauthorized creates a ListClustersOfProjectUnauthorized with default headers values
func NewListClustersOfProjectUnauthorized() *ListClustersOfProjectUnauthorized {
	return &ListClustersOfProjectUnauthorized{}
}

/*
ListClustersOfProjectUnauthorized describes a response with status code 401, with default header values.

The API key cannot be authenticated.
*/
type ListClustersOfProjectUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this list clusters of project unauthorized response has a 2xx status code
func (o *ListClustersOfProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clusters of project unauthorized response has a 3xx status code
func (o *ListClustersOfProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project unauthorized response has a 4xx status code
func (o *ListClustersOfProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clusters of project unauthorized response has a 5xx status code
func (o *ListClustersOfProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list clusters of project unauthorized response a status code equal to that given
func (o *ListClustersOfProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list clusters of project unauthorized response
func (o *ListClustersOfProjectUnauthorized) Code() int {
	return 401
}

func (o *ListClustersOfProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *ListClustersOfProjectUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *ListClustersOfProjectUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ListClustersOfProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectForbidden creates a ListClustersOfProjectForbidden with default headers values
func NewListClustersOfProjectForbidden() *ListClustersOfProjectForbidden {
	return &ListClustersOfProjectForbidden{}
}

/*
ListClustersOfProjectForbidden describes a response with status code 403, with default header values.

The API key does not have permission to access the resource.
*/
type ListClustersOfProjectForbidden struct {
	Payload *ListClustersOfProjectForbiddenBody
}

// IsSuccess returns true when this list clusters of project forbidden response has a 2xx status code
func (o *ListClustersOfProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clusters of project forbidden response has a 3xx status code
func (o *ListClustersOfProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project forbidden response has a 4xx status code
func (o *ListClustersOfProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clusters of project forbidden response has a 5xx status code
func (o *ListClustersOfProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list clusters of project forbidden response a status code equal to that given
func (o *ListClustersOfProjectForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list clusters of project forbidden response
func (o *ListClustersOfProjectForbidden) Code() int {
	return 403
}

func (o *ListClustersOfProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectForbidden  %+v", 403, o.Payload)
}

func (o *ListClustersOfProjectForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectForbidden  %+v", 403, o.Payload)
}

func (o *ListClustersOfProjectForbidden) GetPayload() *ListClustersOfProjectForbiddenBody {
	return o.Payload
}

func (o *ListClustersOfProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectNotFound creates a ListClustersOfProjectNotFound with default headers values
func NewListClustersOfProjectNotFound() *ListClustersOfProjectNotFound {
	return &ListClustersOfProjectNotFound{}
}

/*
ListClustersOfProjectNotFound describes a response with status code 404, with default header values.

The requested resource does not exist.
*/
type ListClustersOfProjectNotFound struct {
	Payload *ListClustersOfProjectNotFoundBody
}

// IsSuccess returns true when this list clusters of project not found response has a 2xx status code
func (o *ListClustersOfProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clusters of project not found response has a 3xx status code
func (o *ListClustersOfProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project not found response has a 4xx status code
func (o *ListClustersOfProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clusters of project not found response has a 5xx status code
func (o *ListClustersOfProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list clusters of project not found response a status code equal to that given
func (o *ListClustersOfProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list clusters of project not found response
func (o *ListClustersOfProjectNotFound) Code() int {
	return 404
}

func (o *ListClustersOfProjectNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectNotFound  %+v", 404, o.Payload)
}

func (o *ListClustersOfProjectNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectNotFound  %+v", 404, o.Payload)
}

func (o *ListClustersOfProjectNotFound) GetPayload() *ListClustersOfProjectNotFoundBody {
	return o.Payload
}

func (o *ListClustersOfProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectTooManyRequests creates a ListClustersOfProjectTooManyRequests with default headers values
func NewListClustersOfProjectTooManyRequests() *ListClustersOfProjectTooManyRequests {
	return &ListClustersOfProjectTooManyRequests{}
}

/*
ListClustersOfProjectTooManyRequests describes a response with status code 429, with default header values.

You have exceed the rate limit.
*/
type ListClustersOfProjectTooManyRequests struct {
	Payload *ListClustersOfProjectTooManyRequestsBody
}

// IsSuccess returns true when this list clusters of project too many requests response has a 2xx status code
func (o *ListClustersOfProjectTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clusters of project too many requests response has a 3xx status code
func (o *ListClustersOfProjectTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project too many requests response has a 4xx status code
func (o *ListClustersOfProjectTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clusters of project too many requests response has a 5xx status code
func (o *ListClustersOfProjectTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list clusters of project too many requests response a status code equal to that given
func (o *ListClustersOfProjectTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list clusters of project too many requests response
func (o *ListClustersOfProjectTooManyRequests) Code() int {
	return 429
}

func (o *ListClustersOfProjectTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListClustersOfProjectTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListClustersOfProjectTooManyRequests) GetPayload() *ListClustersOfProjectTooManyRequestsBody {
	return o.Payload
}

func (o *ListClustersOfProjectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectInternalServerError creates a ListClustersOfProjectInternalServerError with default headers values
func NewListClustersOfProjectInternalServerError() *ListClustersOfProjectInternalServerError {
	return &ListClustersOfProjectInternalServerError{}
}

/*
ListClustersOfProjectInternalServerError describes a response with status code 500, with default header values.

Server error.
*/
type ListClustersOfProjectInternalServerError struct {
	Payload *ListClustersOfProjectInternalServerErrorBody
}

// IsSuccess returns true when this list clusters of project internal server error response has a 2xx status code
func (o *ListClustersOfProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clusters of project internal server error response has a 3xx status code
func (o *ListClustersOfProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clusters of project internal server error response has a 4xx status code
func (o *ListClustersOfProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list clusters of project internal server error response has a 5xx status code
func (o *ListClustersOfProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list clusters of project internal server error response a status code equal to that given
func (o *ListClustersOfProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list clusters of project internal server error response
func (o *ListClustersOfProjectInternalServerError) Code() int {
	return 500
}

func (o *ListClustersOfProjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *ListClustersOfProjectInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] listClustersOfProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *ListClustersOfProjectInternalServerError) GetPayload() *ListClustersOfProjectInternalServerErrorBody {
	return o.Payload
}

func (o *ListClustersOfProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClustersOfProjectDefault creates a ListClustersOfProjectDefault with default headers values
func NewListClustersOfProjectDefault(code int) *ListClustersOfProjectDefault {
	return &ListClustersOfProjectDefault{
		_statusCode: code,
	}
}

/*
ListClustersOfProjectDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListClustersOfProjectDefault struct {
	_statusCode int

	Payload *ListClustersOfProjectDefaultBody
}

// IsSuccess returns true when this list clusters of project default response has a 2xx status code
func (o *ListClustersOfProjectDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list clusters of project default response has a 3xx status code
func (o *ListClustersOfProjectDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list clusters of project default response has a 4xx status code
func (o *ListClustersOfProjectDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list clusters of project default response has a 5xx status code
func (o *ListClustersOfProjectDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list clusters of project default response a status code equal to that given
func (o *ListClustersOfProjectDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list clusters of project default response
func (o *ListClustersOfProjectDefault) Code() int {
	return o._statusCode
}

func (o *ListClustersOfProjectDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] ListClustersOfProject default  %+v", o._statusCode, o.Payload)
}

func (o *ListClustersOfProjectDefault) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters][%d] ListClustersOfProject default  %+v", o._statusCode, o.Payload)
}

func (o *ListClustersOfProjectDefault) GetPayload() *ListClustersOfProjectDefaultBody {
	return o.Payload
}

func (o *ListClustersOfProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListClustersOfProjectDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListClustersOfProjectBadRequestBody list clusters of project bad request body
swagger:model ListClustersOfProjectBadRequestBody
*/
type ListClustersOfProjectBadRequestBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list clusters of project bad request body
func (o *ListClustersOfProjectBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list clusters of project bad request body based on context it is used
func (o *ListClustersOfProjectBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectDefaultBody list clusters of project default body
swagger:model ListClustersOfProjectDefaultBody
*/
type ListClustersOfProjectDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ListClustersOfProjectDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this list clusters of project default body
func (o *ListClustersOfProjectDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListClustersOfProject default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListClustersOfProject default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list clusters of project default body based on the context it is used
func (o *ListClustersOfProjectDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListClustersOfProject default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListClustersOfProject default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectDefaultBodyDetailsItems0 list clusters of project default body details items0
swagger:model ListClustersOfProjectDefaultBodyDetailsItems0
*/
type ListClustersOfProjectDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list clusters of project default body details items0
func (o *ListClustersOfProjectDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list clusters of project default body details items0 based on context it is used
func (o *ListClustersOfProjectDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectForbiddenBody list clusters of project forbidden body
swagger:model ListClustersOfProjectForbiddenBody
*/
type ListClustersOfProjectForbiddenBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list clusters of project forbidden body
func (o *ListClustersOfProjectForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list clusters of project forbidden body based on context it is used
func (o *ListClustersOfProjectForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectInternalServerErrorBody list clusters of project internal server error body
swagger:model ListClustersOfProjectInternalServerErrorBody
*/
type ListClustersOfProjectInternalServerErrorBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list clusters of project internal server error body
func (o *ListClustersOfProjectInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list clusters of project internal server error body based on context it is used
func (o *ListClustersOfProjectInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectNotFoundBody list clusters of project not found body
swagger:model ListClustersOfProjectNotFoundBody
*/
type ListClustersOfProjectNotFoundBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list clusters of project not found body
func (o *ListClustersOfProjectNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list clusters of project not found body based on context it is used
func (o *ListClustersOfProjectNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBody GetClustersOfProjectResp
//
// GetClustersOfProjectResp is the response for getting clusters of project.
swagger:model ListClustersOfProjectOKBody
*/
type ListClustersOfProjectOKBody struct {

	// The items of clusters in the project.
	// Required: true
	Items []*ListClustersOfProjectOKBodyItemsItems0 `json:"items"`

	// The total number of clusters in the project.
	// Example: 1
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this list clusters of project o k body
func (o *ListClustersOfProjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBody) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("listClustersOfProjectOK"+"."+"items", "body", o.Items); err != nil {
		return err
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listClustersOfProjectOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listClustersOfProjectOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListClustersOfProjectOKBody) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("listClustersOfProjectOK"+"."+"total", "body", o.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list clusters of project o k body based on the context it is used
func (o *ListClustersOfProjectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {

			if swag.IsZero(o.Items[i]) { // not required
				return nil
			}

			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listClustersOfProjectOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listClustersOfProjectOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0 ClusterItem
//
// ClusterItem is the information of cluster.
swagger:model ListClustersOfProjectOKBodyItemsItems0
*/
type ListClustersOfProjectOKBodyItemsItems0 struct {

	// The cloud provider on which your TiDB cluster is hosted.
	// - `"AWS"`: the Amazon Web Services cloud provider
	// - `"GCP"`: the Google Cloud cloud provider
	// Example: AWS
	// Enum: [AWS GCP]
	CloudProvider string `json:"cloud_provider,omitempty"`

	// The cluster type:
	// - `"DEVELOPER"`: a [TiDB Serverless](https://docs.pingcap.com/tidbcloud/select-cluster-tier#tidb-serverless) cluster
	// - `"DEDICATED"`: a [TiDB Dedicated](https://docs.pingcap.com/tidbcloud/select-cluster-tier#dedicated-tier) cluster
	//
	// **Warning:** `"DEVELOPER"` will soon be changed to `"SERVERLESS"` to represent TiDB Serverless clusters.
	// Example: DEDICATED
	// Enum: [DEDICATED DEVELOPER]
	ClusterType string `json:"cluster_type,omitempty"`

	// config
	Config *ListClustersOfProjectOKBodyItemsItems0Config `json:"config,omitempty"`

	// The creation time of the cluster in Unix timestamp seconds (epoch time).
	// Example: 1656991448
	CreateTimestamp string `json:"create_timestamp,omitempty"`

	// The ID of the cluster.
	// Example: 1
	// Required: true
	ID *string `json:"id"`

	// The name of the cluster.
	// Example: Cluster0
	// Pattern: ^[A-Za-z0-9][-A-Za-z0-9]{2,62}[A-Za-z0-9]$
	Name string `json:"name,omitempty"`

	// The ID of the project.
	// Example: 1
	// Required: true
	ProjectID *string `json:"project_id"`

	// Region of the cluster.
	// Example: us-west-2
	Region string `json:"region,omitempty"`

	// status
	Status *ListClustersOfProjectOKBodyItemsItems0Status `json:"status,omitempty"`
}

// Validate validates this list clusters of project o k body items items0
func (o *ListClustersOfProjectOKBodyItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listClustersOfProjectOKBodyItemsItems0TypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersOfProjectOKBodyItemsItems0TypeCloudProviderPropEnum = append(listClustersOfProjectOKBodyItemsItems0TypeCloudProviderPropEnum, v)
	}
}

const (

	// ListClustersOfProjectOKBodyItemsItems0CloudProviderAWS captures enum value "AWS"
	ListClustersOfProjectOKBodyItemsItems0CloudProviderAWS string = "AWS"

	// ListClustersOfProjectOKBodyItemsItems0CloudProviderGCP captures enum value "GCP"
	ListClustersOfProjectOKBodyItemsItems0CloudProviderGCP string = "GCP"
)

// prop value enum
func (o *ListClustersOfProjectOKBodyItemsItems0) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersOfProjectOKBodyItemsItems0TypeCloudProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateCloudProvider(formats strfmt.Registry) error {
	if swag.IsZero(o.CloudProvider) { // not required
		return nil
	}

	// value enum
	if err := o.validateCloudProviderEnum("cloud_provider", "body", o.CloudProvider); err != nil {
		return err
	}

	return nil
}

var listClustersOfProjectOKBodyItemsItems0TypeClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEDICATED","DEVELOPER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersOfProjectOKBodyItemsItems0TypeClusterTypePropEnum = append(listClustersOfProjectOKBodyItemsItems0TypeClusterTypePropEnum, v)
	}
}

const (

	// ListClustersOfProjectOKBodyItemsItems0ClusterTypeDEDICATED captures enum value "DEDICATED"
	ListClustersOfProjectOKBodyItemsItems0ClusterTypeDEDICATED string = "DEDICATED"

	// ListClustersOfProjectOKBodyItemsItems0ClusterTypeDEVELOPER captures enum value "DEVELOPER"
	ListClustersOfProjectOKBodyItemsItems0ClusterTypeDEVELOPER string = "DEVELOPER"
)

// prop value enum
func (o *ListClustersOfProjectOKBodyItemsItems0) validateClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersOfProjectOKBodyItemsItems0TypeClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateClusterType(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterType) { // not required
		return nil
	}

	// value enum
	if err := o.validateClusterTypeEnum("cluster_type", "body", o.ClusterType); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.Config) { // not required
		return nil
	}

	if o.Config != nil {
		if err := o.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", o.Name, `^[A-Za-z0-9][-A-Za-z0-9]{2,62}[A-Za-z0-9]$`); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", o.ProjectID); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	if o.Status != nil {
		if err := o.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list clusters of project o k body items items0 based on the context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.Config != nil {

		if swag.IsZero(o.Config) { // not required
			return nil
		}

		if err := o.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if o.Status != nil {

		if swag.IsZero(o.Status) { // not required
			return nil
		}

		if err := o.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0Config The configuration of the cluster.
// Example: {"components":{"tidb":{"node_quantity":2,"node_size":"8C16G"},"tikv":{"node_quantity":3,"node_size":"8C32G","storage_size_gib":1024}},"port":4000}
swagger:model ListClustersOfProjectOKBodyItemsItems0Config
*/
type ListClustersOfProjectOKBodyItemsItems0Config struct {

	// components
	Components *ListClustersOfProjectOKBodyItemsItems0ConfigComponents `json:"components,omitempty"`

	// The TiDB port for connection. The port must be in the range of 1024-65535 except 10080.
	// Example: 4000
	// Maximum: 65535
	// Minimum: 1024
	Port int32 `json:"port,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 config
func (o *ListClustersOfProjectOKBodyItemsItems0Config) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Config) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(o.Components) { // not required
		return nil
	}

	if o.Components != nil {
		if err := o.Components.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Config) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(o.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("config"+"."+"port", "body", int64(o.Port), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("config"+"."+"port", "body", int64(o.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list clusters of project o k body items items0 config based on the context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0Config) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Config) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	if o.Components != nil {

		if swag.IsZero(o.Components) { // not required
			return nil
		}

		if err := o.Components.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0Config) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0Config) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0Config
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0ConfigComponents The components of the cluster.
// Example: {"tidb":{"node_quantity":2,"node_size":"8C16G"},"tikv":{"node_quantity":3,"node_size":"8C32G","storage_size_gib":1024}}
swagger:model ListClustersOfProjectOKBodyItemsItems0ConfigComponents
*/
type ListClustersOfProjectOKBodyItemsItems0ConfigComponents struct {

	// tidb
	// Required: true
	Tidb *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb `json:"tidb"`

	// tiflash
	Tiflash *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash `json:"tiflash,omitempty"`

	// tikv
	// Required: true
	Tikv *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv `json:"tikv"`
}

// Validate validates this list clusters of project o k body items items0 config components
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTidb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTiflash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTikv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) validateTidb(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tidb", "body", o.Tidb); err != nil {
		return err
	}

	if o.Tidb != nil {
		if err := o.Tidb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components" + "." + "tidb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components" + "." + "tidb")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) validateTiflash(formats strfmt.Registry) error {
	if swag.IsZero(o.Tiflash) { // not required
		return nil
	}

	if o.Tiflash != nil {
		if err := o.Tiflash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components" + "." + "tiflash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components" + "." + "tiflash")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) validateTikv(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tikv", "body", o.Tikv); err != nil {
		return err
	}

	if o.Tikv != nil {
		if err := o.Tikv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components" + "." + "tikv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components" + "." + "tikv")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list clusters of project o k body items items0 config components based on the context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTidb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTiflash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTikv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) contextValidateTidb(ctx context.Context, formats strfmt.Registry) error {

	if o.Tidb != nil {

		if err := o.Tidb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components" + "." + "tidb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components" + "." + "tidb")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) contextValidateTiflash(ctx context.Context, formats strfmt.Registry) error {

	if o.Tiflash != nil {

		if swag.IsZero(o.Tiflash) { // not required
			return nil
		}

		if err := o.Tiflash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components" + "." + "tiflash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components" + "." + "tiflash")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) contextValidateTikv(ctx context.Context, formats strfmt.Registry) error {

	if o.Tikv != nil {

		if err := o.Tikv.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config" + "." + "components" + "." + "tikv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config" + "." + "components" + "." + "tikv")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponents) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0ConfigComponents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb The TiDB component of the cluster.
swagger:model ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb
*/
type ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb struct {

	// The number of nodes in the cluster. You can get the minimum and step of a node quantity from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// Example: 2
	// Required: true
	NodeQuantity *int32 `json:"node_quantity"`

	// The size of the TiDB component in the cluster. You can get the available node size of each region from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Additional combination rules**:
	// - If the vCPUs of TiDB or TiKV component is 4, then their vCPUs need to be the same.
	// - If the vCPUs of TiDB or TiKV component is 4, then the cluster does not support TiFlash.
	// Example: 8C16G
	// Required: true
	NodeSize *string `json:"node_size"`
}

// Validate validates this list clusters of project o k body items items0 config components tidb
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb) validateNodeQuantity(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tidb"+"."+"node_quantity", "body", o.NodeQuantity); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb) validateNodeSize(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tidb"+"."+"node_size", "body", o.NodeSize); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 config components tidb based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTidb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash The TiFlash component of the cluster.
swagger:model ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash
*/
type ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash struct {

	// The number of nodes in the cluster. You can get the minimum and step of a node quantity from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	// Example: 1
	// Required: true
	NodeQuantity *int32 `json:"node_quantity"`

	// The size of the TiFlash component in the cluster. You can get the available node size of each region from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Additional combination rules**:
	// - If the vCPUs of TiDB or TiKV component is 4, then their vCPUs need to be the same.
	// - If the vCPUs of TiDB or TiKV component is 4, then the cluster does not support TiFlash.
	// Example: 8C64G
	// Required: true
	NodeSize *string `json:"node_size"`

	// The storage size of a node in the cluster. You can get the minimum and maximum of storage size from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// Example: 1024
	// Required: true
	StorageSizeGib *int32 `json:"storage_size_gib"`
}

// Validate validates this list clusters of project o k body items items0 config components tiflash
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStorageSizeGib(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) validateNodeQuantity(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tiflash"+"."+"node_quantity", "body", o.NodeQuantity); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) validateNodeSize(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tiflash"+"."+"node_size", "body", o.NodeSize); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) validateStorageSizeGib(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tiflash"+"."+"storage_size_gib", "body", o.StorageSizeGib); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 config components tiflash based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTiflash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv The TiKV component of the cluster.
swagger:model ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv
*/
type ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv struct {

	// The number of nodes in the cluster. You can get the minimum and step of a node quantity from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Limitations**:
	// - The `node_quantity` of TiKV must be a multiple of 3.
	// Example: 3
	// Required: true
	NodeQuantity *int32 `json:"node_quantity"`

	// The size of the TiKV component in the cluster. You can get the available node size of each region from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Additional combination rules**:
	// - If the vCPUs of TiDB or TiKV component is 4, then their vCPUs need to be the same.
	// - If the vCPUs of TiDB or TiKV component is 4, then the cluster does not support TiFlash.
	// Example: 8C64G
	// Required: true
	NodeSize *string `json:"node_size"`

	// The storage size of a node in the cluster. You can get the minimum and maximum of storage size from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	// Example: 1024
	// Required: true
	StorageSizeGib *int32 `json:"storage_size_gib"`
}

// Validate validates this list clusters of project o k body items items0 config components tikv
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNodeQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStorageSizeGib(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) validateNodeQuantity(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tikv"+"."+"node_quantity", "body", o.NodeQuantity); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) validateNodeSize(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tikv"+"."+"node_size", "body", o.NodeSize); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) validateStorageSizeGib(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"components"+"."+"tikv"+"."+"storage_size_gib", "body", o.StorageSizeGib); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 config components tikv based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0ConfigComponentsTikv
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0Status ClusterItemStatus
//
// The status of the cluster.
swagger:model ListClustersOfProjectOKBodyItemsItems0Status
*/
type ListClustersOfProjectOKBodyItemsItems0Status struct {

	// Status of the cluster.
	// Example: AVAILABLE
	// Enum: [AVAILABLE CREATING MODIFYING PAUSED RESUMING UNAVAILABLE IMPORTING MAINTAINING PAUSING]
	ClusterStatus string `json:"cluster_status,omitempty"`

	// connection strings
	ConnectionStrings *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings `json:"connection_strings,omitempty"`

	// node map
	NodeMap *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap `json:"node_map,omitempty"`

	// TiDB version.
	// Example: v6.1.0
	TidbVersion string `json:"tidb_version,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status
func (o *ListClustersOfProjectOKBodyItemsItems0Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClusterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConnectionStrings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listClustersOfProjectOKBodyItemsItems0StatusTypeClusterStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABLE","CREATING","MODIFYING","PAUSED","RESUMING","UNAVAILABLE","IMPORTING","MAINTAINING","PAUSING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersOfProjectOKBodyItemsItems0StatusTypeClusterStatusPropEnum = append(listClustersOfProjectOKBodyItemsItems0StatusTypeClusterStatusPropEnum, v)
	}
}

const (

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusAVAILABLE captures enum value "AVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusAVAILABLE string = "AVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusCREATING captures enum value "CREATING"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusCREATING string = "CREATING"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusMODIFYING captures enum value "MODIFYING"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusMODIFYING string = "MODIFYING"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusPAUSED captures enum value "PAUSED"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusPAUSED string = "PAUSED"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusRESUMING captures enum value "RESUMING"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusRESUMING string = "RESUMING"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusUNAVAILABLE captures enum value "UNAVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusUNAVAILABLE string = "UNAVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusIMPORTING captures enum value "IMPORTING"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusIMPORTING string = "IMPORTING"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusMAINTAINING captures enum value "MAINTAINING"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusMAINTAINING string = "MAINTAINING"

	// ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusPAUSING captures enum value "PAUSING"
	ListClustersOfProjectOKBodyItemsItems0StatusClusterStatusPAUSING string = "PAUSING"
)

// prop value enum
func (o *ListClustersOfProjectOKBodyItemsItems0Status) validateClusterStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersOfProjectOKBodyItemsItems0StatusTypeClusterStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Status) validateClusterStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateClusterStatusEnum("status"+"."+"cluster_status", "body", o.ClusterStatus); err != nil {
		return err
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Status) validateConnectionStrings(formats strfmt.Registry) error {
	if swag.IsZero(o.ConnectionStrings) { // not required
		return nil
	}

	if o.ConnectionStrings != nil {
		if err := o.ConnectionStrings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "connection_strings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "connection_strings")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Status) validateNodeMap(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeMap) { // not required
		return nil
	}

	if o.NodeMap != nil {
		if err := o.NodeMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "node_map")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "node_map")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list clusters of project o k body items items0 status based on the context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConnectionStrings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNodeMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Status) contextValidateConnectionStrings(ctx context.Context, formats strfmt.Registry) error {

	if o.ConnectionStrings != nil {

		if swag.IsZero(o.ConnectionStrings) { // not required
			return nil
		}

		if err := o.ConnectionStrings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "connection_strings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "connection_strings")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0Status) contextValidateNodeMap(ctx context.Context, formats strfmt.Registry) error {

	if o.NodeMap != nil {

		if swag.IsZero(o.NodeMap) { // not required
			return nil
		}

		if err := o.NodeMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "node_map")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "node_map")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0Status) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0Status) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings Connection strings.
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings
*/
type ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings struct {

	// The default TiDB user for connection.
	// Example: root
	DefaultUser string `json:"default_user,omitempty"`

	// standard
	Standard *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard `json:"standard,omitempty"`

	// vpc peering
	VpcPeering *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering `json:"vpc_peering,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status connection strings
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStandard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVpcPeering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) validateStandard(formats strfmt.Registry) error {
	if swag.IsZero(o.Standard) { // not required
		return nil
	}

	if o.Standard != nil {
		if err := o.Standard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "connection_strings" + "." + "standard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "connection_strings" + "." + "standard")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) validateVpcPeering(formats strfmt.Registry) error {
	if swag.IsZero(o.VpcPeering) { // not required
		return nil
	}

	if o.VpcPeering != nil {
		if err := o.VpcPeering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "connection_strings" + "." + "vpc_peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "connection_strings" + "." + "vpc_peering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list clusters of project o k body items items0 status connection strings based on the context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStandard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVpcPeering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) contextValidateStandard(ctx context.Context, formats strfmt.Registry) error {

	if o.Standard != nil {

		if swag.IsZero(o.Standard) { // not required
			return nil
		}

		if err := o.Standard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "connection_strings" + "." + "standard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "connection_strings" + "." + "standard")
			}
			return err
		}
	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) contextValidateVpcPeering(ctx context.Context, formats strfmt.Registry) error {

	if o.VpcPeering != nil {

		if swag.IsZero(o.VpcPeering) { // not required
			return nil
		}

		if err := o.VpcPeering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status" + "." + "connection_strings" + "." + "vpc_peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status" + "." + "connection_strings" + "." + "vpc_peering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusConnectionStrings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard Standard connection string.
//
// You must configure the [IP Access List](https://docs.pingcap.com/tidbcloud/connect-to-tidb-cluster#connect-via-standard-connection) for the cluster you created on [TiDB Cloud console](https://tidbcloud.com/) before connecting to this connection string.
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard
*/
type ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard struct {

	// The host of standard connection.
	// Example: tidb.f69f3808.acea1f2a.us-east-1.shared.aws.tidbcloud.com
	Host string `json:"host,omitempty"`

	// The TiDB port for connection. The port must be in the range of 1024-65535 except 10080.
	//
	// **Limitations**:
	// - For a TiDB Serverless cluster, only port `4000` is available.
	// Example: 4000
	// Maximum: 65535
	// Minimum: 1024
	Port int32 `json:"port,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status connection strings standard
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(o.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("status"+"."+"connection_strings"+"."+"standard"+"."+"port", "body", int64(o.Port), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status"+"."+"connection_strings"+"."+"standard"+"."+"port", "body", int64(o.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 status connection strings standard based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsStandard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering [VPC peering](https://docs.pingcap.com/tidbcloud/tidb-cloud-glossary#vpc-peering) connection string.
//
// You must [Set up VPC peering connections](https://docs.pingcap.com/tidbcloud/set-up-vpc-peering-connections) for the project before connecting to this private connection string.
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering
*/
type ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering struct {

	// The host of VPC peering connection.
	// Example: private-tidb.f69f3808.acea1f2a.us-east-1.shared.aws.tidbcloud.com
	Host string `json:"host,omitempty"`

	// The TiDB port for connection. The port must be in the range of 1024-65535 except 10080.
	//
	// **Limitations**:
	// - For a TiDB Serverless cluster, only port `4000` is available.
	// Example: 4000
	// Maximum: 65535
	// Minimum: 1024
	Port int32 `json:"port,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status connection strings vpc peering
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(o.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("status"+"."+"connection_strings"+"."+"vpc_peering"+"."+"port", "body", int64(o.Port), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("status"+"."+"connection_strings"+"."+"vpc_peering"+"."+"port", "body", int64(o.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 status connection strings vpc peering based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusConnectionStringsVpcPeering
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusNodeMap Node map. The `node_map` is returned only when the `cluster_status` is `"AVAILABLE"` or `"MODIFYING"`.
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusNodeMap
*/
type ListClustersOfProjectOKBodyItemsItems0StatusNodeMap struct {

	// TiDB node map.
	// Example: [{"availability_zone":"us-west-2a","node_name":"tidb-0","node_size":"8C16G","ram_bytes":"17179869184","status":"NODE_STATUS_AVAILABLE","vcpu_num":8},{"availability_zone":"us-west-2b","node_name":"tidb-1","node_size":"8C16G","ram_bytes":"17179869184","status":"NODE_STATUS_AVAILABLE","vcpu_num":8}]
	// Required: true
	Tidb []*ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0 `json:"tidb"`

	// TiFlash node map.
	// Example: [{"availability_zone":"us-west-2a","node_name":"tiflash-0","node_size":"8C64G","ram_bytes":"68719476736","status":"NODE_STATUS_AVAILABLE","storage_size_gib":1024,"vcpu_num":8},{"availability_zone":"us-west-2b","node_name":"tiflash-1","node_size":"8C64G","ram_bytes":"68719476736","status":"NODE_STATUS_AVAILABLE","storage_size_gib":1024,"vcpu_num":8}]
	Tiflash []*ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0 `json:"tiflash"`

	// TiKV node map.
	// Example: [{"availability_zone":"us-west-2a","node_name":"tikv-0","node_size":"8C32G","ram_bytes":"68719476736","status":"NODE_STATUS_AVAILABLE","storage_size_gib":1024,"vcpu_num":8},{"availability_zone":"us-west-2b","node_name":"tikv-1","node_size":"8C64G","ram_bytes":"68719476736","status":"NODE_STATUS_AVAILABLE","storage_size_gib":1024,"vcpu_num":8},{"availability_zone":"us-west-2c","node_name":"tikv-2","node_size":"8C64G","ram_bytes":"68719476736","status":"NODE_STATUS_AVAILABLE","storage_size_gib":1024,"vcpu_num":8}]
	// Required: true
	Tikv []*ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0 `json:"tikv"`
}

// Validate validates this list clusters of project o k body items items0 status node map
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTidb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTiflash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTikv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) validateTidb(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"node_map"+"."+"tidb", "body", o.Tidb); err != nil {
		return err
	}

	for i := 0; i < len(o.Tidb); i++ {
		if swag.IsZero(o.Tidb[i]) { // not required
			continue
		}

		if o.Tidb[i] != nil {
			if err := o.Tidb[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "node_map" + "." + "tidb" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "node_map" + "." + "tidb" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) validateTiflash(formats strfmt.Registry) error {
	if swag.IsZero(o.Tiflash) { // not required
		return nil
	}

	for i := 0; i < len(o.Tiflash); i++ {
		if swag.IsZero(o.Tiflash[i]) { // not required
			continue
		}

		if o.Tiflash[i] != nil {
			if err := o.Tiflash[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "node_map" + "." + "tiflash" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "node_map" + "." + "tiflash" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) validateTikv(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"node_map"+"."+"tikv", "body", o.Tikv); err != nil {
		return err
	}

	for i := 0; i < len(o.Tikv); i++ {
		if swag.IsZero(o.Tikv[i]) { // not required
			continue
		}

		if o.Tikv[i] != nil {
			if err := o.Tikv[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "node_map" + "." + "tikv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "node_map" + "." + "tikv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list clusters of project o k body items items0 status node map based on the context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTidb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTiflash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTikv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) contextValidateTidb(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tidb); i++ {

		if o.Tidb[i] != nil {

			if swag.IsZero(o.Tidb[i]) { // not required
				return nil
			}

			if err := o.Tidb[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "node_map" + "." + "tidb" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "node_map" + "." + "tidb" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) contextValidateTiflash(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tiflash); i++ {

		if o.Tiflash[i] != nil {

			if swag.IsZero(o.Tiflash[i]) { // not required
				return nil
			}

			if err := o.Tiflash[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "node_map" + "." + "tiflash" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "node_map" + "." + "tiflash" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) contextValidateTikv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tikv); i++ {

		if o.Tikv[i] != nil {

			if swag.IsZero(o.Tikv[i]) { // not required
				return nil
			}

			if err := o.Tikv[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "node_map" + "." + "tikv" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "node_map" + "." + "tikv" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMap) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusNodeMap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0 list clusters of project o k body items items0 status node map tidb items0
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0
*/
type ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0 struct {

	// The availability zone of a node in the cluster.
	// Example: us-west-2a
	AvailabilityZone string `json:"availability_zone,omitempty"`

	// The name of a node in the cluster.
	// Example: tidb-0
	NodeName string `json:"node_name,omitempty"`

	// The size of the TiDB component in the cluster.
	// Example: 8C16G
	NodeSize string `json:"node_size,omitempty"`

	// The RAM size of a node in the cluster. If the `cluster_type` is `"DEVELOPER"`, `ram_bytes` is always 0.
	// Example: 17179869184
	RAMBytes string `json:"ram_bytes,omitempty"`

	// The status of a node in the cluster.
	// Example: NODE_STATUS_AVAILABLE
	// Enum: [NODE_STATUS_AVAILABLE NODE_STATUS_UNAVAILABLE NODE_STATUS_CREATING NODE_STATUS_DELETING]
	Status string `json:"status,omitempty"`

	// The total vCPUs of a node in the cluster. If the `cluster_type` is `"DEVELOPER"`, `vcpu_num` is always 0.
	// Example: 8
	VcpuNum int32 `json:"vcpu_num,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status node map tidb items0
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_STATUS_AVAILABLE","NODE_STATUS_UNAVAILABLE","NODE_STATUS_CREATING","NODE_STATUS_DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0TypeStatusPropEnum = append(listClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSAVAILABLE captures enum value "NODE_STATUS_AVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSAVAILABLE string = "NODE_STATUS_AVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSUNAVAILABLE captures enum value "NODE_STATUS_UNAVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSUNAVAILABLE string = "NODE_STATUS_UNAVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSCREATING captures enum value "NODE_STATUS_CREATING"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSCREATING string = "NODE_STATUS_CREATING"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSDELETING captures enum value "NODE_STATUS_DELETING"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0StatusNODESTATUSDELETING string = "NODE_STATUS_DELETING"
)

// prop value enum
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 status node map tidb items0 based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTidbItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0 list clusters of project o k body items items0 status node map tiflash items0
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0
*/
type ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0 struct {

	// The availability zone of a node in the cluster.
	// Example: us-west-2a
	AvailabilityZone string `json:"availability_zone,omitempty"`

	// The name of a node in the cluster.
	// Example: tiflash-0
	NodeName string `json:"node_name,omitempty"`

	// The size of the TiFlash component in the cluster.
	// Example: 8C64G
	NodeSize string `json:"node_size,omitempty"`

	// The RAM size of a node in the cluster. If the `cluster_type` is `"DEVELOPER"`, `ram_bytes` is always 0.
	// Example: 68719476736
	RAMBytes string `json:"ram_bytes,omitempty"`

	// The status of a node in the cluster.
	// Example: NODE_STATUS_AVAILABLE
	// Enum: [NODE_STATUS_AVAILABLE NODE_STATUS_UNAVAILABLE NODE_STATUS_CREATING NODE_STATUS_DELETING]
	Status string `json:"status,omitempty"`

	// The storage size of a node in the cluster.
	// Example: 1024
	StorageSizeGib int32 `json:"storage_size_gib,omitempty"`

	// The total vCPUs of a node in the cluster. If the `cluster_type` is `"DEVELOPER"`, `vcpu_num` is always 0.
	// Example: 8
	VcpuNum int32 `json:"vcpu_num,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status node map tiflash items0
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_STATUS_AVAILABLE","NODE_STATUS_UNAVAILABLE","NODE_STATUS_CREATING","NODE_STATUS_DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0TypeStatusPropEnum = append(listClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSAVAILABLE captures enum value "NODE_STATUS_AVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSAVAILABLE string = "NODE_STATUS_AVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSUNAVAILABLE captures enum value "NODE_STATUS_UNAVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSUNAVAILABLE string = "NODE_STATUS_UNAVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSCREATING captures enum value "NODE_STATUS_CREATING"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSCREATING string = "NODE_STATUS_CREATING"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSDELETING captures enum value "NODE_STATUS_DELETING"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0StatusNODESTATUSDELETING string = "NODE_STATUS_DELETING"
)

// prop value enum
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 status node map tiflash items0 based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTiflashItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0 list clusters of project o k body items items0 status node map tikv items0
swagger:model ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0
*/
type ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0 struct {

	// The availability zone of a node in the cluster.
	// Example: us-west-2a
	AvailabilityZone string `json:"availability_zone,omitempty"`

	// The name of a node in the cluster.
	// Example: tikv-0
	NodeName string `json:"node_name,omitempty"`

	// The size of the TiKV component in the cluster.
	// Example: 8C32G
	NodeSize string `json:"node_size,omitempty"`

	// The RAM size of a node in the cluster. If the `cluster_type` is `"DEVELOPER"`, `ram_bytes` is always 0.
	// Example: 68719476736
	RAMBytes string `json:"ram_bytes,omitempty"`

	// The status of a node in the cluster.
	// Example: NODE_STATUS_AVAILABLE
	// Enum: [NODE_STATUS_AVAILABLE NODE_STATUS_UNAVAILABLE NODE_STATUS_CREATING NODE_STATUS_DELETING]
	Status string `json:"status,omitempty"`

	// The storage size of a node in the cluster.
	// Example: 1024
	StorageSizeGib int32 `json:"storage_size_gib,omitempty"`

	// The total vCPUs of a node in the cluster. If the `cluster_type` is `"DEVELOPER"`, `vcpu_num` is always 0.
	// Example: 8
	VcpuNum int32 `json:"vcpu_num,omitempty"`
}

// Validate validates this list clusters of project o k body items items0 status node map tikv items0
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_STATUS_AVAILABLE","NODE_STATUS_UNAVAILABLE","NODE_STATUS_CREATING","NODE_STATUS_DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0TypeStatusPropEnum = append(listClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSAVAILABLE captures enum value "NODE_STATUS_AVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSAVAILABLE string = "NODE_STATUS_AVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSUNAVAILABLE captures enum value "NODE_STATUS_UNAVAILABLE"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSUNAVAILABLE string = "NODE_STATUS_UNAVAILABLE"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSCREATING captures enum value "NODE_STATUS_CREATING"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSCREATING string = "NODE_STATUS_CREATING"

	// ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSDELETING captures enum value "NODE_STATUS_DELETING"
	ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0StatusNODESTATUSDELETING string = "NODE_STATUS_DELETING"
)

// prop value enum
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters of project o k body items items0 status node map tikv items0 based on context it is used
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectOKBodyItemsItems0StatusNodeMapTikvItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListClustersOfProjectTooManyRequestsBody list clusters of project too many requests body
swagger:model ListClustersOfProjectTooManyRequestsBody
*/
type ListClustersOfProjectTooManyRequestsBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list clusters of project too many requests body
func (o *ListClustersOfProjectTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list clusters of project too many requests body based on context it is used
func (o *ListClustersOfProjectTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListClustersOfProjectTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListClustersOfProjectTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res ListClustersOfProjectTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
