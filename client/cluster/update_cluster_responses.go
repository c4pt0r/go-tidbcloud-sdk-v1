// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateClusterReader is a Reader for the UpdateCluster structure.
type UpdateClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateClusterTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateClusterOK creates a UpdateClusterOK with default headers values
func NewUpdateClusterOK() *UpdateClusterOK {
	return &UpdateClusterOK{}
}

/*
UpdateClusterOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateClusterOK struct {
	Payload interface{}
}

// IsSuccess returns true when this update cluster o k response has a 2xx status code
func (o *UpdateClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cluster o k response has a 3xx status code
func (o *UpdateClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster o k response has a 4xx status code
func (o *UpdateClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster o k response has a 5xx status code
func (o *UpdateClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster o k response a status code equal to that given
func (o *UpdateClusterOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateClusterOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterOK  %+v", 200, o.Payload)
}

func (o *UpdateClusterOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterOK  %+v", 200, o.Payload)
}

func (o *UpdateClusterOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterBadRequest creates a UpdateClusterBadRequest with default headers values
func NewUpdateClusterBadRequest() *UpdateClusterBadRequest {
	return &UpdateClusterBadRequest{}
}

/*
UpdateClusterBadRequest describes a response with status code 400, with default header values.

A request field is invalid.
*/
type UpdateClusterBadRequest struct {
	Payload *UpdateClusterBadRequestBody
}

// IsSuccess returns true when this update cluster bad request response has a 2xx status code
func (o *UpdateClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster bad request response has a 3xx status code
func (o *UpdateClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster bad request response has a 4xx status code
func (o *UpdateClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster bad request response has a 5xx status code
func (o *UpdateClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster bad request response a status code equal to that given
func (o *UpdateClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateClusterBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClusterBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClusterBadRequest) GetPayload() *UpdateClusterBadRequestBody {
	return o.Payload
}

func (o *UpdateClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateClusterBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterUnauthorized creates a UpdateClusterUnauthorized with default headers values
func NewUpdateClusterUnauthorized() *UpdateClusterUnauthorized {
	return &UpdateClusterUnauthorized{}
}

/*
UpdateClusterUnauthorized describes a response with status code 401, with default header values.

The API key cannot be authenticated.
*/
type UpdateClusterUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this update cluster unauthorized response has a 2xx status code
func (o *UpdateClusterUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster unauthorized response has a 3xx status code
func (o *UpdateClusterUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster unauthorized response has a 4xx status code
func (o *UpdateClusterUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster unauthorized response has a 5xx status code
func (o *UpdateClusterUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster unauthorized response a status code equal to that given
func (o *UpdateClusterUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateClusterUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateClusterUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateClusterUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterForbidden creates a UpdateClusterForbidden with default headers values
func NewUpdateClusterForbidden() *UpdateClusterForbidden {
	return &UpdateClusterForbidden{}
}

/*
UpdateClusterForbidden describes a response with status code 403, with default header values.

The API key does not have permission to access the resource.
*/
type UpdateClusterForbidden struct {
	Payload *UpdateClusterForbiddenBody
}

// IsSuccess returns true when this update cluster forbidden response has a 2xx status code
func (o *UpdateClusterForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster forbidden response has a 3xx status code
func (o *UpdateClusterForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster forbidden response has a 4xx status code
func (o *UpdateClusterForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster forbidden response has a 5xx status code
func (o *UpdateClusterForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster forbidden response a status code equal to that given
func (o *UpdateClusterForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateClusterForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterForbidden  %+v", 403, o.Payload)
}

func (o *UpdateClusterForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterForbidden  %+v", 403, o.Payload)
}

func (o *UpdateClusterForbidden) GetPayload() *UpdateClusterForbiddenBody {
	return o.Payload
}

func (o *UpdateClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateClusterForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterNotFound creates a UpdateClusterNotFound with default headers values
func NewUpdateClusterNotFound() *UpdateClusterNotFound {
	return &UpdateClusterNotFound{}
}

/*
UpdateClusterNotFound describes a response with status code 404, with default header values.

The requested resource does not exist.
*/
type UpdateClusterNotFound struct {
	Payload *UpdateClusterNotFoundBody
}

// IsSuccess returns true when this update cluster not found response has a 2xx status code
func (o *UpdateClusterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster not found response has a 3xx status code
func (o *UpdateClusterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster not found response has a 4xx status code
func (o *UpdateClusterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster not found response has a 5xx status code
func (o *UpdateClusterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster not found response a status code equal to that given
func (o *UpdateClusterNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateClusterNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClusterNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClusterNotFound) GetPayload() *UpdateClusterNotFoundBody {
	return o.Payload
}

func (o *UpdateClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateClusterNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterTooManyRequests creates a UpdateClusterTooManyRequests with default headers values
func NewUpdateClusterTooManyRequests() *UpdateClusterTooManyRequests {
	return &UpdateClusterTooManyRequests{}
}

/*
UpdateClusterTooManyRequests describes a response with status code 429, with default header values.

You have exceed the rate limit.
*/
type UpdateClusterTooManyRequests struct {
	Payload *UpdateClusterTooManyRequestsBody
}

// IsSuccess returns true when this update cluster too many requests response has a 2xx status code
func (o *UpdateClusterTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster too many requests response has a 3xx status code
func (o *UpdateClusterTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster too many requests response has a 4xx status code
func (o *UpdateClusterTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster too many requests response has a 5xx status code
func (o *UpdateClusterTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster too many requests response a status code equal to that given
func (o *UpdateClusterTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateClusterTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateClusterTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateClusterTooManyRequests) GetPayload() *UpdateClusterTooManyRequestsBody {
	return o.Payload
}

func (o *UpdateClusterTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateClusterTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterInternalServerError creates a UpdateClusterInternalServerError with default headers values
func NewUpdateClusterInternalServerError() *UpdateClusterInternalServerError {
	return &UpdateClusterInternalServerError{}
}

/*
UpdateClusterInternalServerError describes a response with status code 500, with default header values.

Server error.
*/
type UpdateClusterInternalServerError struct {
	Payload *UpdateClusterInternalServerErrorBody
}

// IsSuccess returns true when this update cluster internal server error response has a 2xx status code
func (o *UpdateClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster internal server error response has a 3xx status code
func (o *UpdateClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster internal server error response has a 4xx status code
func (o *UpdateClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster internal server error response has a 5xx status code
func (o *UpdateClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update cluster internal server error response a status code equal to that given
func (o *UpdateClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateClusterInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateClusterInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] updateClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateClusterInternalServerError) GetPayload() *UpdateClusterInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateClusterInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterDefault creates a UpdateClusterDefault with default headers values
func NewUpdateClusterDefault(code int) *UpdateClusterDefault {
	return &UpdateClusterDefault{
		_statusCode: code,
	}
}

/*
UpdateClusterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateClusterDefault struct {
	_statusCode int

	Payload *UpdateClusterDefaultBody
}

// Code gets the status code for the update cluster default response
func (o *UpdateClusterDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this update cluster default response has a 2xx status code
func (o *UpdateClusterDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update cluster default response has a 3xx status code
func (o *UpdateClusterDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update cluster default response has a 4xx status code
func (o *UpdateClusterDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update cluster default response has a 5xx status code
func (o *UpdateClusterDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update cluster default response a status code equal to that given
func (o *UpdateClusterDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *UpdateClusterDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] UpdateCluster default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateClusterDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1beta/projects/{project_id}/clusters/{cluster_id}][%d] UpdateCluster default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateClusterDefault) GetPayload() *UpdateClusterDefaultBody {
	return o.Payload
}

func (o *UpdateClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateClusterBadRequestBody update cluster bad request body
swagger:model UpdateClusterBadRequestBody
*/
type UpdateClusterBadRequestBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this update cluster bad request body
func (o *UpdateClusterBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster bad request body based on context it is used
func (o *UpdateClusterBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterBody UpdateClusterReq
//
// UpdateClusterReq is the request for updating cluster.
swagger:model UpdateClusterBody
*/
type UpdateClusterBody struct {

	// config
	// Required: true
	Config *UpdateClusterParamsBodyConfig `json:"config"`
}

// Validate validates this update cluster body
func (o *UpdateClusterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterBody) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"config", "body", o.Config); err != nil {
		return err
	}

	if o.Config != nil {
		if err := o.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update cluster body based on the context it is used
func (o *UpdateClusterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterBody) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.Config != nil {
		if err := o.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterDefaultBody update cluster default body
swagger:model UpdateClusterDefaultBody
*/
type UpdateClusterDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*UpdateClusterDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this update cluster default body
func (o *UpdateClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UpdateCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UpdateCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update cluster default body based on the context it is used
func (o *UpdateClusterDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UpdateCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UpdateCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterDefaultBodyDetailsItems0 update cluster default body details items0
swagger:model UpdateClusterDefaultBodyDetailsItems0
*/
type UpdateClusterDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this update cluster default body details items0
func (o *UpdateClusterDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster default body details items0 based on context it is used
func (o *UpdateClusterDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateClusterDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterForbiddenBody update cluster forbidden body
swagger:model UpdateClusterForbiddenBody
*/
type UpdateClusterForbiddenBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this update cluster forbidden body
func (o *UpdateClusterForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster forbidden body based on context it is used
func (o *UpdateClusterForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterInternalServerErrorBody update cluster internal server error body
swagger:model UpdateClusterInternalServerErrorBody
*/
type UpdateClusterInternalServerErrorBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this update cluster internal server error body
func (o *UpdateClusterInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster internal server error body based on context it is used
func (o *UpdateClusterInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterNotFoundBody update cluster not found body
swagger:model UpdateClusterNotFoundBody
*/
type UpdateClusterNotFoundBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this update cluster not found body
func (o *UpdateClusterNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster not found body based on context it is used
func (o *UpdateClusterNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterParamsBodyConfig UpdateClusterComponents
//
// The configuration of the cluster. You can modify the components of the cluster using `components`, or pause or resume the cluster using `paused`.
//
//  You cannot change the cluster components and cluster status at the same time. That is, `components` and `paused` cannot be set at the same time.
// Example: {"components":{"tidb":{"node_quantity":3,"node_size":"16C32G"},"tiflash":{"node_quantity":2,"node_size":"16C128G","storage_size_gib":2048},"tikv":{"node_quantity":6,"node_size":"16C64G","storage_size_gib":2048}}}
swagger:model UpdateClusterParamsBodyConfig
*/
type UpdateClusterParamsBodyConfig struct {

	// components
	Components *UpdateClusterParamsBodyConfigComponents `json:"components,omitempty"`

	// Flag that indicates whether the cluster is paused. `true` means to pause the cluster, and `false` means to resume the cluster. For more details, refer to [Pause or Resume a TiDB Cluster](https://docs.pingcap.com/tidbcloud/pause-or-resume-tidb-cluster).
	//
	// **Limitations:**
	//  - The cluster can be paused only when the `cluster_status` is `"AVAILABLE"`.
	// - The cluster can be resumed only when the `cluster_status` is `"PAUSED"`.
	Paused bool `json:"paused,omitempty"`
}

// Validate validates this update cluster params body config
func (o *UpdateClusterParamsBodyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterParamsBodyConfig) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(o.Components) { // not required
		return nil
	}

	if o.Components != nil {
		if err := o.Components.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update cluster params body config based on the context it is used
func (o *UpdateClusterParamsBodyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterParamsBodyConfig) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	if o.Components != nil {
		if err := o.Components.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfig) UnmarshalBinary(b []byte) error {
	var res UpdateClusterParamsBodyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterParamsBodyConfigComponents The components of the cluster.
swagger:model UpdateClusterParamsBodyConfigComponents
*/
type UpdateClusterParamsBodyConfigComponents struct {

	// tidb
	Tidb *UpdateClusterParamsBodyConfigComponentsTidb `json:"tidb,omitempty"`

	// tiflash
	Tiflash *UpdateClusterParamsBodyConfigComponentsTiflash `json:"tiflash,omitempty"`

	// tikv
	Tikv *UpdateClusterParamsBodyConfigComponentsTikv `json:"tikv,omitempty"`
}

// Validate validates this update cluster params body config components
func (o *UpdateClusterParamsBodyConfigComponents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTidb(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTiflash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTikv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterParamsBodyConfigComponents) validateTidb(formats strfmt.Registry) error {
	if swag.IsZero(o.Tidb) { // not required
		return nil
	}

	if o.Tidb != nil {
		if err := o.Tidb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components" + "." + "tidb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components" + "." + "tidb")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateClusterParamsBodyConfigComponents) validateTiflash(formats strfmt.Registry) error {
	if swag.IsZero(o.Tiflash) { // not required
		return nil
	}

	if o.Tiflash != nil {
		if err := o.Tiflash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components" + "." + "tiflash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components" + "." + "tiflash")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateClusterParamsBodyConfigComponents) validateTikv(formats strfmt.Registry) error {
	if swag.IsZero(o.Tikv) { // not required
		return nil
	}

	if o.Tikv != nil {
		if err := o.Tikv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components" + "." + "tikv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components" + "." + "tikv")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update cluster params body config components based on the context it is used
func (o *UpdateClusterParamsBodyConfigComponents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTidb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTiflash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTikv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterParamsBodyConfigComponents) contextValidateTidb(ctx context.Context, formats strfmt.Registry) error {

	if o.Tidb != nil {
		if err := o.Tidb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components" + "." + "tidb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components" + "." + "tidb")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateClusterParamsBodyConfigComponents) contextValidateTiflash(ctx context.Context, formats strfmt.Registry) error {

	if o.Tiflash != nil {
		if err := o.Tiflash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components" + "." + "tiflash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components" + "." + "tiflash")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateClusterParamsBodyConfigComponents) contextValidateTikv(ctx context.Context, formats strfmt.Registry) error {

	if o.Tikv != nil {
		if err := o.Tikv.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "config" + "." + "components" + "." + "tikv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "config" + "." + "components" + "." + "tikv")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponents) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponents) UnmarshalBinary(b []byte) error {
	var res UpdateClusterParamsBodyConfigComponents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterParamsBodyConfigComponentsTidb The TiDB component of the cluster.
swagger:model UpdateClusterParamsBodyConfigComponentsTidb
*/
type UpdateClusterParamsBodyConfigComponentsTidb struct {

	// The number of nodes in the cluster. You can get the minimum and step of a node quantity from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	// Example: 3
	NodeQuantity int32 `json:"node_quantity,omitempty"`

	// The size of the TiDB component in the cluster. You can get the available node size of each region from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Additional combination rules**:
	// - If the vCPUs of TiDB or TiKV component is 2 or 4, then their vCPUs need to be the same.
	// - If the vCPUs of TiDB or TiKV component is 2 or 4, then the cluster does not support TiFlash.
	//
	// **Limitations**:
	// - See [Change node size](https://docs.pingcap.com/tidbcloud/scale-tidb-cluster#change-node-size).
	// Example: 16C32G
	NodeSize string `json:"node_size,omitempty"`
}

// Validate validates this update cluster params body config components tidb
func (o *UpdateClusterParamsBodyConfigComponentsTidb) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster params body config components tidb based on context it is used
func (o *UpdateClusterParamsBodyConfigComponentsTidb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponentsTidb) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponentsTidb) UnmarshalBinary(b []byte) error {
	var res UpdateClusterParamsBodyConfigComponentsTidb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterParamsBodyConfigComponentsTiflash The TiFlash component of the cluster.
//
// If you want to add TiFlash nodes to a cluster that does not have one before (increase the node_quantity of `"TIFLASH"` from 0), you must specify the `node_size`, `storage_size_gib` and `node_quantity` of TiFlash nodes.
swagger:model UpdateClusterParamsBodyConfigComponentsTiflash
*/
type UpdateClusterParamsBodyConfigComponentsTiflash struct {

	// The number of nodes in the cluster. You can get the minimum and step of a node quantity from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	// Example: 2
	NodeQuantity int32 `json:"node_quantity,omitempty"`

	// The size of the TiFlash component in the cluster. You can get the available node size of each region from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Additional combination rules**:
	// - If the vCPUs of TiDB or TiKV component is 2 or 4, then their vCPUs need to be the same.
	// - If the vCPUs of TiDB or TiKV component is 2 or 4, then the cluster does not support TiFlash.
	//
	// **Limitations**:
	// - See [Change node size](https://docs.pingcap.com/tidbcloud/scale-tidb-cluster#change-node-size).
	// Example: 16C128G
	NodeSize string `json:"node_size,omitempty"`

	// The storage size of a node in the cluster. You can get the minimum and maximum of storage size from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Limitations**:
	// - You cannot decrease storage size for TiFlash.
	// - If your TiDB cluster is hosted by AWS, after changing the storage size of TiFlash, you must wait at least six hours before you can change it again.
	// Example: 2048
	StorageSizeGib int32 `json:"storage_size_gib,omitempty"`
}

// Validate validates this update cluster params body config components tiflash
func (o *UpdateClusterParamsBodyConfigComponentsTiflash) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster params body config components tiflash based on context it is used
func (o *UpdateClusterParamsBodyConfigComponentsTiflash) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponentsTiflash) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponentsTiflash) UnmarshalBinary(b []byte) error {
	var res UpdateClusterParamsBodyConfigComponentsTiflash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterParamsBodyConfigComponentsTikv The TiKV component of the cluster.
swagger:model UpdateClusterParamsBodyConfigComponentsTikv
*/
type UpdateClusterParamsBodyConfigComponentsTikv struct {

	// The number of nodes in the cluster. You can get the minimum and step of a node quantity from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Limitations**:
	// - The `node_quantity` of TiKV must be a multiple of 3.
	// Example: 6
	NodeQuantity int32 `json:"node_quantity,omitempty"`

	// The size of the TiKV component in the cluster. You can get the available node size of each region from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Additional combination rules**:
	// - If the vCPUs of TiDB or TiKV component is 2 or 4, then their vCPUs need to be the same.
	// - If the vCPUs of TiDB or TiKV component is 2 or 4, then the cluster does not support TiFlash.
	//
	// **Limitations**:
	// - See [Change node size](https://docs.pingcap.com/tidbcloud/scale-tidb-cluster#change-node-size).
	// Example: 16C64G
	NodeSize string `json:"node_size,omitempty"`

	// The storage size of a node in the cluster. You can get the minimum and maximum of storage size from the response of [List the cloud providers, regions and available specifications](#tag/Cluster/operation/ListProviderRegions).
	//
	// **Limitations**:
	// - You cannot decrease storage size for TiKV.
	// - If your TiDB cluster is hosted by AWS, after changing the storage size of TiKV, you must wait at least six hours before you can change it again.
	// Example: 2048
	StorageSizeGib int32 `json:"storage_size_gib,omitempty"`
}

// Validate validates this update cluster params body config components tikv
func (o *UpdateClusterParamsBodyConfigComponentsTikv) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster params body config components tikv based on context it is used
func (o *UpdateClusterParamsBodyConfigComponentsTikv) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponentsTikv) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterParamsBodyConfigComponentsTikv) UnmarshalBinary(b []byte) error {
	var res UpdateClusterParamsBodyConfigComponentsTikv
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateClusterTooManyRequestsBody update cluster too many requests body
swagger:model UpdateClusterTooManyRequestsBody
*/
type UpdateClusterTooManyRequestsBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this update cluster too many requests body
func (o *UpdateClusterTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cluster too many requests body based on context it is used
func (o *UpdateClusterTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
