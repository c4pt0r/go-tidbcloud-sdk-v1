// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListBackUpOfClusterReader is a Reader for the ListBackUpOfCluster structure.
type ListBackUpOfClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListBackUpOfClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListBackUpOfClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListBackUpOfClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListBackUpOfClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListBackUpOfClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListBackUpOfClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListBackUpOfClusterTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListBackUpOfClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListBackUpOfClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListBackUpOfClusterOK creates a ListBackUpOfClusterOK with default headers values
func NewListBackUpOfClusterOK() *ListBackUpOfClusterOK {
	return &ListBackUpOfClusterOK{}
}

/*
ListBackUpOfClusterOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListBackUpOfClusterOK struct {
	Payload *ListBackUpOfClusterOKBody
}

// IsSuccess returns true when this list back up of cluster o k response has a 2xx status code
func (o *ListBackUpOfClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list back up of cluster o k response has a 3xx status code
func (o *ListBackUpOfClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster o k response has a 4xx status code
func (o *ListBackUpOfClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list back up of cluster o k response has a 5xx status code
func (o *ListBackUpOfClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list back up of cluster o k response a status code equal to that given
func (o *ListBackUpOfClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list back up of cluster o k response
func (o *ListBackUpOfClusterOK) Code() int {
	return 200
}

func (o *ListBackUpOfClusterOK) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterOK  %+v", 200, o.Payload)
}

func (o *ListBackUpOfClusterOK) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterOK  %+v", 200, o.Payload)
}

func (o *ListBackUpOfClusterOK) GetPayload() *ListBackUpOfClusterOKBody {
	return o.Payload
}

func (o *ListBackUpOfClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterBadRequest creates a ListBackUpOfClusterBadRequest with default headers values
func NewListBackUpOfClusterBadRequest() *ListBackUpOfClusterBadRequest {
	return &ListBackUpOfClusterBadRequest{}
}

/*
ListBackUpOfClusterBadRequest describes a response with status code 400, with default header values.

A request field is invalid.
*/
type ListBackUpOfClusterBadRequest struct {
	Payload *ListBackUpOfClusterBadRequestBody
}

// IsSuccess returns true when this list back up of cluster bad request response has a 2xx status code
func (o *ListBackUpOfClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list back up of cluster bad request response has a 3xx status code
func (o *ListBackUpOfClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster bad request response has a 4xx status code
func (o *ListBackUpOfClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list back up of cluster bad request response has a 5xx status code
func (o *ListBackUpOfClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list back up of cluster bad request response a status code equal to that given
func (o *ListBackUpOfClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list back up of cluster bad request response
func (o *ListBackUpOfClusterBadRequest) Code() int {
	return 400
}

func (o *ListBackUpOfClusterBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterBadRequest  %+v", 400, o.Payload)
}

func (o *ListBackUpOfClusterBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterBadRequest  %+v", 400, o.Payload)
}

func (o *ListBackUpOfClusterBadRequest) GetPayload() *ListBackUpOfClusterBadRequestBody {
	return o.Payload
}

func (o *ListBackUpOfClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterUnauthorized creates a ListBackUpOfClusterUnauthorized with default headers values
func NewListBackUpOfClusterUnauthorized() *ListBackUpOfClusterUnauthorized {
	return &ListBackUpOfClusterUnauthorized{}
}

/*
ListBackUpOfClusterUnauthorized describes a response with status code 401, with default header values.

The API key cannot be authenticated.
*/
type ListBackUpOfClusterUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this list back up of cluster unauthorized response has a 2xx status code
func (o *ListBackUpOfClusterUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list back up of cluster unauthorized response has a 3xx status code
func (o *ListBackUpOfClusterUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster unauthorized response has a 4xx status code
func (o *ListBackUpOfClusterUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list back up of cluster unauthorized response has a 5xx status code
func (o *ListBackUpOfClusterUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list back up of cluster unauthorized response a status code equal to that given
func (o *ListBackUpOfClusterUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list back up of cluster unauthorized response
func (o *ListBackUpOfClusterUnauthorized) Code() int {
	return 401
}

func (o *ListBackUpOfClusterUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *ListBackUpOfClusterUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *ListBackUpOfClusterUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ListBackUpOfClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterForbidden creates a ListBackUpOfClusterForbidden with default headers values
func NewListBackUpOfClusterForbidden() *ListBackUpOfClusterForbidden {
	return &ListBackUpOfClusterForbidden{}
}

/*
ListBackUpOfClusterForbidden describes a response with status code 403, with default header values.

The API key does not have permission to access the resource.
*/
type ListBackUpOfClusterForbidden struct {
	Payload *ListBackUpOfClusterForbiddenBody
}

// IsSuccess returns true when this list back up of cluster forbidden response has a 2xx status code
func (o *ListBackUpOfClusterForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list back up of cluster forbidden response has a 3xx status code
func (o *ListBackUpOfClusterForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster forbidden response has a 4xx status code
func (o *ListBackUpOfClusterForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list back up of cluster forbidden response has a 5xx status code
func (o *ListBackUpOfClusterForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list back up of cluster forbidden response a status code equal to that given
func (o *ListBackUpOfClusterForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list back up of cluster forbidden response
func (o *ListBackUpOfClusterForbidden) Code() int {
	return 403
}

func (o *ListBackUpOfClusterForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterForbidden  %+v", 403, o.Payload)
}

func (o *ListBackUpOfClusterForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterForbidden  %+v", 403, o.Payload)
}

func (o *ListBackUpOfClusterForbidden) GetPayload() *ListBackUpOfClusterForbiddenBody {
	return o.Payload
}

func (o *ListBackUpOfClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterNotFound creates a ListBackUpOfClusterNotFound with default headers values
func NewListBackUpOfClusterNotFound() *ListBackUpOfClusterNotFound {
	return &ListBackUpOfClusterNotFound{}
}

/*
ListBackUpOfClusterNotFound describes a response with status code 404, with default header values.

The requested resource does not exist.
*/
type ListBackUpOfClusterNotFound struct {
	Payload *ListBackUpOfClusterNotFoundBody
}

// IsSuccess returns true when this list back up of cluster not found response has a 2xx status code
func (o *ListBackUpOfClusterNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list back up of cluster not found response has a 3xx status code
func (o *ListBackUpOfClusterNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster not found response has a 4xx status code
func (o *ListBackUpOfClusterNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list back up of cluster not found response has a 5xx status code
func (o *ListBackUpOfClusterNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list back up of cluster not found response a status code equal to that given
func (o *ListBackUpOfClusterNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list back up of cluster not found response
func (o *ListBackUpOfClusterNotFound) Code() int {
	return 404
}

func (o *ListBackUpOfClusterNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterNotFound  %+v", 404, o.Payload)
}

func (o *ListBackUpOfClusterNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterNotFound  %+v", 404, o.Payload)
}

func (o *ListBackUpOfClusterNotFound) GetPayload() *ListBackUpOfClusterNotFoundBody {
	return o.Payload
}

func (o *ListBackUpOfClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterTooManyRequests creates a ListBackUpOfClusterTooManyRequests with default headers values
func NewListBackUpOfClusterTooManyRequests() *ListBackUpOfClusterTooManyRequests {
	return &ListBackUpOfClusterTooManyRequests{}
}

/*
ListBackUpOfClusterTooManyRequests describes a response with status code 429, with default header values.

You have exceed the rate limit.
*/
type ListBackUpOfClusterTooManyRequests struct {
	Payload *ListBackUpOfClusterTooManyRequestsBody
}

// IsSuccess returns true when this list back up of cluster too many requests response has a 2xx status code
func (o *ListBackUpOfClusterTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list back up of cluster too many requests response has a 3xx status code
func (o *ListBackUpOfClusterTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster too many requests response has a 4xx status code
func (o *ListBackUpOfClusterTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list back up of cluster too many requests response has a 5xx status code
func (o *ListBackUpOfClusterTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list back up of cluster too many requests response a status code equal to that given
func (o *ListBackUpOfClusterTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list back up of cluster too many requests response
func (o *ListBackUpOfClusterTooManyRequests) Code() int {
	return 429
}

func (o *ListBackUpOfClusterTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListBackUpOfClusterTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListBackUpOfClusterTooManyRequests) GetPayload() *ListBackUpOfClusterTooManyRequestsBody {
	return o.Payload
}

func (o *ListBackUpOfClusterTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterInternalServerError creates a ListBackUpOfClusterInternalServerError with default headers values
func NewListBackUpOfClusterInternalServerError() *ListBackUpOfClusterInternalServerError {
	return &ListBackUpOfClusterInternalServerError{}
}

/*
ListBackUpOfClusterInternalServerError describes a response with status code 500, with default header values.

Server error.
*/
type ListBackUpOfClusterInternalServerError struct {
	Payload *ListBackUpOfClusterInternalServerErrorBody
}

// IsSuccess returns true when this list back up of cluster internal server error response has a 2xx status code
func (o *ListBackUpOfClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list back up of cluster internal server error response has a 3xx status code
func (o *ListBackUpOfClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list back up of cluster internal server error response has a 4xx status code
func (o *ListBackUpOfClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list back up of cluster internal server error response has a 5xx status code
func (o *ListBackUpOfClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list back up of cluster internal server error response a status code equal to that given
func (o *ListBackUpOfClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list back up of cluster internal server error response
func (o *ListBackUpOfClusterInternalServerError) Code() int {
	return 500
}

func (o *ListBackUpOfClusterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *ListBackUpOfClusterInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] listBackUpOfClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *ListBackUpOfClusterInternalServerError) GetPayload() *ListBackUpOfClusterInternalServerErrorBody {
	return o.Payload
}

func (o *ListBackUpOfClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBackUpOfClusterDefault creates a ListBackUpOfClusterDefault with default headers values
func NewListBackUpOfClusterDefault(code int) *ListBackUpOfClusterDefault {
	return &ListBackUpOfClusterDefault{
		_statusCode: code,
	}
}

/*
ListBackUpOfClusterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListBackUpOfClusterDefault struct {
	_statusCode int

	Payload *ListBackUpOfClusterDefaultBody
}

// IsSuccess returns true when this list back up of cluster default response has a 2xx status code
func (o *ListBackUpOfClusterDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list back up of cluster default response has a 3xx status code
func (o *ListBackUpOfClusterDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list back up of cluster default response has a 4xx status code
func (o *ListBackUpOfClusterDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list back up of cluster default response has a 5xx status code
func (o *ListBackUpOfClusterDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list back up of cluster default response a status code equal to that given
func (o *ListBackUpOfClusterDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list back up of cluster default response
func (o *ListBackUpOfClusterDefault) Code() int {
	return o._statusCode
}

func (o *ListBackUpOfClusterDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] ListBackUpOfCluster default  %+v", o._statusCode, o.Payload)
}

func (o *ListBackUpOfClusterDefault) String() string {
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/backups][%d] ListBackUpOfCluster default  %+v", o._statusCode, o.Payload)
}

func (o *ListBackUpOfClusterDefault) GetPayload() *ListBackUpOfClusterDefaultBody {
	return o.Payload
}

func (o *ListBackUpOfClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListBackUpOfClusterDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListBackUpOfClusterBadRequestBody list back up of cluster bad request body
swagger:model ListBackUpOfClusterBadRequestBody
*/
type ListBackUpOfClusterBadRequestBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list back up of cluster bad request body
func (o *ListBackUpOfClusterBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list back up of cluster bad request body based on context it is used
func (o *ListBackUpOfClusterBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterDefaultBody list back up of cluster default body
swagger:model ListBackUpOfClusterDefaultBody
*/
type ListBackUpOfClusterDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ListBackUpOfClusterDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this list back up of cluster default body
func (o *ListBackUpOfClusterDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackUpOfClusterDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListBackUpOfCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListBackUpOfCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list back up of cluster default body based on the context it is used
func (o *ListBackUpOfClusterDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackUpOfClusterDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListBackUpOfCluster default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListBackUpOfCluster default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterDefaultBodyDetailsItems0 list back up of cluster default body details items0
swagger:model ListBackUpOfClusterDefaultBodyDetailsItems0
*/
type ListBackUpOfClusterDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list back up of cluster default body details items0
func (o *ListBackUpOfClusterDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list back up of cluster default body details items0 based on context it is used
func (o *ListBackUpOfClusterDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterForbiddenBody list back up of cluster forbidden body
swagger:model ListBackUpOfClusterForbiddenBody
*/
type ListBackUpOfClusterForbiddenBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list back up of cluster forbidden body
func (o *ListBackUpOfClusterForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list back up of cluster forbidden body based on context it is used
func (o *ListBackUpOfClusterForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterInternalServerErrorBody list back up of cluster internal server error body
swagger:model ListBackUpOfClusterInternalServerErrorBody
*/
type ListBackUpOfClusterInternalServerErrorBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list back up of cluster internal server error body
func (o *ListBackUpOfClusterInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list back up of cluster internal server error body based on context it is used
func (o *ListBackUpOfClusterInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterNotFoundBody list back up of cluster not found body
swagger:model ListBackUpOfClusterNotFoundBody
*/
type ListBackUpOfClusterNotFoundBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list back up of cluster not found body
func (o *ListBackUpOfClusterNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list back up of cluster not found body based on context it is used
func (o *ListBackUpOfClusterNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterOKBody ListBackupOfClusterResp
//
// The response for listing backups of a cluster.
swagger:model ListBackUpOfClusterOKBody
*/
type ListBackUpOfClusterOKBody struct {

	// The items of all backups.
	Items []*ListBackUpOfClusterOKBodyItemsItems0 `json:"items"`

	// The total number of backups in the project.
	// Example: 10
	Total int64 `json:"total,omitempty"`
}

// Validate validates this list back up of cluster o k body
func (o *ListBackUpOfClusterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackUpOfClusterOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listBackUpOfClusterOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listBackUpOfClusterOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list back up of cluster o k body based on the context it is used
func (o *ListBackUpOfClusterOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackUpOfClusterOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {

			if swag.IsZero(o.Items[i]) { // not required
				return nil
			}

			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listBackUpOfClusterOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listBackUpOfClusterOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterOKBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterOKBodyItemsItems0 ListBackupItem
//
// The item of backup list.
swagger:model ListBackUpOfClusterOKBodyItemsItems0
*/
type ListBackUpOfClusterOKBodyItemsItems0 struct {

	// The creation time of the backup in UTC. The time format follows the [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) standard, which is `YYYY-MM-DD` (year-month-day) + T +`HH:MM:SS` (hour-minutes-seconds) + Z. For example, `2020-01-01T00:00:00Z`.
	// Example: 2020-01-01T00:00:00Z
	// Format: date-time
	CreateTimestamp strfmt.DateTime `json:"create_timestamp,omitempty"`

	// The description of the backup. It is specified by the user when taking a manual type backup. It helps you add additional information to the backup.
	// Example: backup for cluster upgrade in 2022/06/07
	Description string `json:"description,omitempty"`

	// The ID of the backup. It is generated by TiDB Cloud.
	// Example: 1
	ID string `json:"id,omitempty"`

	// The name of the backup.
	// Example: backup-1
	Name string `json:"name,omitempty"`

	// The bytes of the backup.
	// Example: 102400
	Size string `json:"size,omitempty"`

	// The status of backup.
	// Example: SUCCESS
	// Enum: [PENDING RUNNING FAILED SUCCESS]
	Status string `json:"status,omitempty"`

	// The type of backup. TiDB Cloud only supports manual and auto backup. For more information, see [TiDB Cloud Documentation](https://docs.pingcap.com/tidbcloud/backup-and-restore#backup).
	// Example: MANUAL
	// Enum: [MANUAL AUTO]
	Type string `json:"type,omitempty"`
}

// Validate validates this list back up of cluster o k body items items0
func (o *ListBackUpOfClusterOKBodyItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListBackUpOfClusterOKBodyItemsItems0) validateCreateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.CreateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("create_timestamp", "body", "date-time", o.CreateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var listBackUpOfClusterOKBodyItemsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","FAILED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listBackUpOfClusterOKBodyItemsItems0TypeStatusPropEnum = append(listBackUpOfClusterOKBodyItemsItems0TypeStatusPropEnum, v)
	}
}

const (

	// ListBackUpOfClusterOKBodyItemsItems0StatusPENDING captures enum value "PENDING"
	ListBackUpOfClusterOKBodyItemsItems0StatusPENDING string = "PENDING"

	// ListBackUpOfClusterOKBodyItemsItems0StatusRUNNING captures enum value "RUNNING"
	ListBackUpOfClusterOKBodyItemsItems0StatusRUNNING string = "RUNNING"

	// ListBackUpOfClusterOKBodyItemsItems0StatusFAILED captures enum value "FAILED"
	ListBackUpOfClusterOKBodyItemsItems0StatusFAILED string = "FAILED"

	// ListBackUpOfClusterOKBodyItemsItems0StatusSUCCESS captures enum value "SUCCESS"
	ListBackUpOfClusterOKBodyItemsItems0StatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (o *ListBackUpOfClusterOKBodyItemsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listBackUpOfClusterOKBodyItemsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListBackUpOfClusterOKBodyItemsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

var listBackUpOfClusterOKBodyItemsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listBackUpOfClusterOKBodyItemsItems0TypeTypePropEnum = append(listBackUpOfClusterOKBodyItemsItems0TypeTypePropEnum, v)
	}
}

const (

	// ListBackUpOfClusterOKBodyItemsItems0TypeMANUAL captures enum value "MANUAL"
	ListBackUpOfClusterOKBodyItemsItems0TypeMANUAL string = "MANUAL"

	// ListBackUpOfClusterOKBodyItemsItems0TypeAUTO captures enum value "AUTO"
	ListBackUpOfClusterOKBodyItemsItems0TypeAUTO string = "AUTO"
)

// prop value enum
func (o *ListBackUpOfClusterOKBodyItemsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listBackUpOfClusterOKBodyItemsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListBackUpOfClusterOKBodyItemsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list back up of cluster o k body items items0 based on context it is used
func (o *ListBackUpOfClusterOKBodyItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterOKBodyItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterOKBodyItemsItems0) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterOKBodyItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListBackUpOfClusterTooManyRequestsBody list back up of cluster too many requests body
swagger:model ListBackUpOfClusterTooManyRequestsBody
*/
type ListBackUpOfClusterTooManyRequestsBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this list back up of cluster too many requests body
func (o *ListBackUpOfClusterTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list back up of cluster too many requests body based on context it is used
func (o *ListBackUpOfClusterTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListBackUpOfClusterTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListBackUpOfClusterTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res ListBackUpOfClusterTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
