// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProjectReader is a Reader for the CreateProject structure.
type CreateProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateProjectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateProjectOK creates a CreateProjectOK with default headers values
func NewCreateProjectOK() *CreateProjectOK {
	return &CreateProjectOK{}
}

/*
CreateProjectOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateProjectOK struct {
	Payload *CreateProjectOKBody
}

// IsSuccess returns true when this create project o k response has a 2xx status code
func (o *CreateProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create project o k response has a 3xx status code
func (o *CreateProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project o k response has a 4xx status code
func (o *CreateProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create project o k response has a 5xx status code
func (o *CreateProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create project o k response a status code equal to that given
func (o *CreateProjectOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateProjectOK) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectOK  %+v", 200, o.Payload)
}

func (o *CreateProjectOK) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectOK  %+v", 200, o.Payload)
}

func (o *CreateProjectOK) GetPayload() *CreateProjectOKBody {
	return o.Payload
}

func (o *CreateProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectBadRequest creates a CreateProjectBadRequest with default headers values
func NewCreateProjectBadRequest() *CreateProjectBadRequest {
	return &CreateProjectBadRequest{}
}

/*
CreateProjectBadRequest describes a response with status code 400, with default header values.

A request field is invalid.
*/
type CreateProjectBadRequest struct {
	Payload *CreateProjectBadRequestBody
}

// IsSuccess returns true when this create project bad request response has a 2xx status code
func (o *CreateProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create project bad request response has a 3xx status code
func (o *CreateProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project bad request response has a 4xx status code
func (o *CreateProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create project bad request response has a 5xx status code
func (o *CreateProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create project bad request response a status code equal to that given
func (o *CreateProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectBadRequest  %+v", 400, o.Payload)
}

func (o *CreateProjectBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectBadRequest  %+v", 400, o.Payload)
}

func (o *CreateProjectBadRequest) GetPayload() *CreateProjectBadRequestBody {
	return o.Payload
}

func (o *CreateProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectUnauthorized creates a CreateProjectUnauthorized with default headers values
func NewCreateProjectUnauthorized() *CreateProjectUnauthorized {
	return &CreateProjectUnauthorized{}
}

/*
CreateProjectUnauthorized describes a response with status code 401, with default header values.

The API key cannot be authenticated.
*/
type CreateProjectUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this create project unauthorized response has a 2xx status code
func (o *CreateProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create project unauthorized response has a 3xx status code
func (o *CreateProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project unauthorized response has a 4xx status code
func (o *CreateProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create project unauthorized response has a 5xx status code
func (o *CreateProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create project unauthorized response a status code equal to that given
func (o *CreateProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateProjectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateProjectUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateProjectUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectForbidden creates a CreateProjectForbidden with default headers values
func NewCreateProjectForbidden() *CreateProjectForbidden {
	return &CreateProjectForbidden{}
}

/*
CreateProjectForbidden describes a response with status code 403, with default header values.

The API key does not have permission to access the resource.
*/
type CreateProjectForbidden struct {
	Payload *CreateProjectForbiddenBody
}

// IsSuccess returns true when this create project forbidden response has a 2xx status code
func (o *CreateProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create project forbidden response has a 3xx status code
func (o *CreateProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project forbidden response has a 4xx status code
func (o *CreateProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create project forbidden response has a 5xx status code
func (o *CreateProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create project forbidden response a status code equal to that given
func (o *CreateProjectForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectForbidden  %+v", 403, o.Payload)
}

func (o *CreateProjectForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectForbidden  %+v", 403, o.Payload)
}

func (o *CreateProjectForbidden) GetPayload() *CreateProjectForbiddenBody {
	return o.Payload
}

func (o *CreateProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectNotFound creates a CreateProjectNotFound with default headers values
func NewCreateProjectNotFound() *CreateProjectNotFound {
	return &CreateProjectNotFound{}
}

/*
CreateProjectNotFound describes a response with status code 404, with default header values.

The requested resource does not exist.
*/
type CreateProjectNotFound struct {
	Payload *CreateProjectNotFoundBody
}

// IsSuccess returns true when this create project not found response has a 2xx status code
func (o *CreateProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create project not found response has a 3xx status code
func (o *CreateProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project not found response has a 4xx status code
func (o *CreateProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create project not found response has a 5xx status code
func (o *CreateProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create project not found response a status code equal to that given
func (o *CreateProjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectNotFound  %+v", 404, o.Payload)
}

func (o *CreateProjectNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectNotFound  %+v", 404, o.Payload)
}

func (o *CreateProjectNotFound) GetPayload() *CreateProjectNotFoundBody {
	return o.Payload
}

func (o *CreateProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectTooManyRequests creates a CreateProjectTooManyRequests with default headers values
func NewCreateProjectTooManyRequests() *CreateProjectTooManyRequests {
	return &CreateProjectTooManyRequests{}
}

/*
CreateProjectTooManyRequests describes a response with status code 429, with default header values.

You have exceed the rate limit.
*/
type CreateProjectTooManyRequests struct {
	Payload *CreateProjectTooManyRequestsBody
}

// IsSuccess returns true when this create project too many requests response has a 2xx status code
func (o *CreateProjectTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create project too many requests response has a 3xx status code
func (o *CreateProjectTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project too many requests response has a 4xx status code
func (o *CreateProjectTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create project too many requests response has a 5xx status code
func (o *CreateProjectTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create project too many requests response a status code equal to that given
func (o *CreateProjectTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateProjectTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateProjectTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateProjectTooManyRequests) GetPayload() *CreateProjectTooManyRequestsBody {
	return o.Payload
}

func (o *CreateProjectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectInternalServerError creates a CreateProjectInternalServerError with default headers values
func NewCreateProjectInternalServerError() *CreateProjectInternalServerError {
	return &CreateProjectInternalServerError{}
}

/*
CreateProjectInternalServerError describes a response with status code 500, with default header values.

Server error.
*/
type CreateProjectInternalServerError struct {
	Payload *CreateProjectInternalServerErrorBody
}

// IsSuccess returns true when this create project internal server error response has a 2xx status code
func (o *CreateProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create project internal server error response has a 3xx status code
func (o *CreateProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create project internal server error response has a 4xx status code
func (o *CreateProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create project internal server error response has a 5xx status code
func (o *CreateProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create project internal server error response a status code equal to that given
func (o *CreateProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateProjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateProjectInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] createProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateProjectInternalServerError) GetPayload() *CreateProjectInternalServerErrorBody {
	return o.Payload
}

func (o *CreateProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateProjectDefault creates a CreateProjectDefault with default headers values
func NewCreateProjectDefault(code int) *CreateProjectDefault {
	return &CreateProjectDefault{
		_statusCode: code,
	}
}

/*
CreateProjectDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CreateProjectDefault struct {
	_statusCode int

	Payload *CreateProjectDefaultBody
}

// Code gets the status code for the create project default response
func (o *CreateProjectDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this create project default response has a 2xx status code
func (o *CreateProjectDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create project default response has a 3xx status code
func (o *CreateProjectDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create project default response has a 4xx status code
func (o *CreateProjectDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create project default response has a 5xx status code
func (o *CreateProjectDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create project default response a status code equal to that given
func (o *CreateProjectDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CreateProjectDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] CreateProject default  %+v", o._statusCode, o.Payload)
}

func (o *CreateProjectDefault) String() string {
	return fmt.Sprintf("[POST /api/v1beta/projects][%d] CreateProject default  %+v", o._statusCode, o.Payload)
}

func (o *CreateProjectDefault) GetPayload() *CreateProjectDefaultBody {
	return o.Payload
}

func (o *CreateProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateProjectDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateProjectBadRequestBody create project bad request body
swagger:model CreateProjectBadRequestBody
*/
type CreateProjectBadRequestBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this create project bad request body
func (o *CreateProjectBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create project bad request body based on context it is used
func (o *CreateProjectBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectBody CreateProjectReq
//
// CreateProjectReq is the request for creating project.
swagger:model CreateProjectBody
*/
type CreateProjectBody struct {

	// Flag that indicates whether to enable AWS Customer-Managed Encryption Keys.
	//
	// Currently this feature is only available upon request. If you need to try out this feature, contact [support](https://docs.pingcap.com/tidbcloud/tidb-cloud-support).
	// Example: false
	AwsCmekEnabled *bool `json:"aws_cmek_enabled,omitempty"`

	// The name of the project.
	// Example: Project0
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create project body
func (o *CreateProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateProjectBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create project body based on context it is used
func (o *CreateProjectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectDefaultBody create project default body
swagger:model CreateProjectDefaultBody
*/
type CreateProjectDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*CreateProjectDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this create project default body
func (o *CreateProjectDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateProjectDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreateProject default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CreateProject default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create project default body based on the context it is used
func (o *CreateProjectDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateProjectDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreateProject default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CreateProject default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectDefaultBodyDetailsItems0 create project default body details items0
swagger:model CreateProjectDefaultBodyDetailsItems0
*/
type CreateProjectDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this create project default body details items0
func (o *CreateProjectDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create project default body details items0 based on context it is used
func (o *CreateProjectDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateProjectDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectForbiddenBody create project forbidden body
swagger:model CreateProjectForbiddenBody
*/
type CreateProjectForbiddenBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this create project forbidden body
func (o *CreateProjectForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create project forbidden body based on context it is used
func (o *CreateProjectForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectInternalServerErrorBody create project internal server error body
swagger:model CreateProjectInternalServerErrorBody
*/
type CreateProjectInternalServerErrorBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this create project internal server error body
func (o *CreateProjectInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create project internal server error body based on context it is used
func (o *CreateProjectInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectNotFoundBody create project not found body
swagger:model CreateProjectNotFoundBody
*/
type CreateProjectNotFoundBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this create project not found body
func (o *CreateProjectNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create project not found body based on context it is used
func (o *CreateProjectNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectOKBody CreateProjectResp
//
// CreateProjectResp is the response for creating project.
swagger:model CreateProjectOKBody
*/
type CreateProjectOKBody struct {

	// The ID of the project.
	// Example: 1
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this create project o k body
func (o *CreateProjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateProjectOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createProjectOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create project o k body based on context it is used
func (o *CreateProjectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectOKBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateProjectTooManyRequestsBody create project too many requests body
swagger:model CreateProjectTooManyRequestsBody
*/
type CreateProjectTooManyRequestsBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this create project too many requests body
func (o *CreateProjectTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create project too many requests body based on context it is used
func (o *CreateProjectTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
