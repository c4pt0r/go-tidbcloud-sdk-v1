// Code generated by go-swagger; DO NOT EDIT.

package import_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new import operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for import operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateImportTask(params *CreateImportTaskParams, opts ...ClientOption) (*CreateImportTaskOK, error)

	GetImportTask(params *GetImportTaskParams, opts ...ClientOption) (*GetImportTaskOK, error)

	GetImportTaskRoleInfo(params *GetImportTaskRoleInfoParams, opts ...ClientOption) (*GetImportTaskRoleInfoOK, error)

	ListImportTasks(params *ListImportTasksParams, opts ...ClientOption) (*ListImportTasksOK, error)

	PreviewImportData(params *PreviewImportDataParams, opts ...ClientOption) (*PreviewImportDataOK, error)

	UpdateImportTask(params *UpdateImportTaskParams, opts ...ClientOption) (*UpdateImportTaskOK, error)

	UploadLocalFile(params *UploadLocalFileParams, opts ...ClientOption) (*UploadLocalFileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateImportTask creates an import task
*/
func (a *Client) CreateImportTask(params *CreateImportTaskParams, opts ...ClientOption) (*CreateImportTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImportTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateImportTask",
		Method:             "POST",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateImportTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImportTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateImportTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetImportTask gets an import task
*/
func (a *Client) GetImportTask(params *GetImportTaskParams, opts ...ClientOption) (*GetImportTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImportTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetImportTask",
		Method:             "GET",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/{import_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImportTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImportTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImportTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetImportTaskRoleInfo retrieves the role information for import tasks on a cluster

Retrieve the role information for import tasks on a cluster, so that you can configure the access for the import tasks to retrieve the data from the data source. For more information on how to configure the access for the import tasks, refer to [Configure Amazon S3 Access and GCS Access](https://docs.pingcap.com/tidbcloud/config-s3-and-gcs-access).
*/
func (a *Client) GetImportTaskRoleInfo(params *GetImportTaskRoleInfoParams, opts ...ClientOption) (*GetImportTaskRoleInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImportTaskRoleInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetImportTaskRoleInfo",
		Method:             "GET",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImportTaskRoleInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImportTaskRoleInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImportTaskRoleInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListImportTasks lists all import tasks for a cluster
*/
func (a *Client) ListImportTasks(params *ListImportTasksParams, opts ...ClientOption) (*ListImportTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImportTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListImportTasks",
		Method:             "GET",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListImportTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListImportTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListImportTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PreviewImportData previews data before starting an import task

Before you create an import task, you can preview the data using this endpoint and make sure that the import task is configured as intended. The preview result is organized by tables.
*/
func (a *Client) PreviewImportData(params *PreviewImportDataParams, opts ...ClientOption) (*PreviewImportDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreviewImportDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PreviewImportData",
		Method:             "POST",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreviewImportDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreviewImportDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PreviewImportDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateImportTask updates an import task

Update an import task from a cluster. Currently, this endpoint only supports canceling the import task if the current phase of the import task is `PREPARING` or `IMPORTING`.
*/
func (a *Client) UpdateImportTask(params *UpdateImportTaskParams, opts ...ClientOption) (*UpdateImportTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImportTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateImportTask",
		Method:             "PATCH",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/{import_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateImportTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImportTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateImportTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UploadLocalFile uploads a local file for an import task

	If you need to import data from a local file, you must first upload the file using this endpoint before you create an import task using the [Create an import task](#tag/Import/operation/CreateImportTask) endpoint.

Uploading a local file is only available for TiDB Serverless clusters.
*/
func (a *Client) UploadLocalFile(params *UploadLocalFileParams, opts ...ClientOption) (*UploadLocalFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadLocalFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadLocalFile",
		Method:             "POST",
		PathPattern:        "/api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/upload_file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadLocalFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadLocalFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadLocalFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
