// Code generated by go-swagger; DO NOT EDIT.

package import_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListImportTasksParams creates a new ListImportTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListImportTasksParams() *ListImportTasksParams {
	return &ListImportTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListImportTasksParamsWithTimeout creates a new ListImportTasksParams object
// with the ability to set a timeout on a request.
func NewListImportTasksParamsWithTimeout(timeout time.Duration) *ListImportTasksParams {
	return &ListImportTasksParams{
		timeout: timeout,
	}
}

// NewListImportTasksParamsWithContext creates a new ListImportTasksParams object
// with the ability to set a context for a request.
func NewListImportTasksParamsWithContext(ctx context.Context) *ListImportTasksParams {
	return &ListImportTasksParams{
		Context: ctx,
	}
}

// NewListImportTasksParamsWithHTTPClient creates a new ListImportTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewListImportTasksParamsWithHTTPClient(client *http.Client) *ListImportTasksParams {
	return &ListImportTasksParams{
		HTTPClient: client,
	}
}

/*
ListImportTasksParams contains all the parameters to send to the API endpoint

	for the list import tasks operation.

	Typically these are written to a http.Request.
*/
type ListImportTasksParams struct {

	/* ClusterID.

	   The ID of your cluster. You can get the cluster ID from the response of [List all clusters in a project](#tag/Cluster/operation/ListClustersOfProject).

	   Format: uint64
	*/
	ClusterID string

	/* Page.

	   The number of pages.

	   Format: int64
	   Default: 1
	*/
	Page *int64

	/* PageSize.

	   The size of a page.

	   Format: int64
	   Default: 10
	*/
	PageSize *int64

	/* ProjectID.

	   The ID of your project. You can get the project ID from the response of [List all accessible projects](#tag/Project/operation/ListProjects).

	   Format: uint64
	*/
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list import tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListImportTasksParams) WithDefaults() *ListImportTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list import tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListImportTasksParams) SetDefaults() {
	var (
		pageDefault = int64(1)

		pageSizeDefault = int64(10)
	)

	val := ListImportTasksParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list import tasks params
func (o *ListImportTasksParams) WithTimeout(timeout time.Duration) *ListImportTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list import tasks params
func (o *ListImportTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list import tasks params
func (o *ListImportTasksParams) WithContext(ctx context.Context) *ListImportTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list import tasks params
func (o *ListImportTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list import tasks params
func (o *ListImportTasksParams) WithHTTPClient(client *http.Client) *ListImportTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list import tasks params
func (o *ListImportTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the list import tasks params
func (o *ListImportTasksParams) WithClusterID(clusterID string) *ListImportTasksParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the list import tasks params
func (o *ListImportTasksParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithPage adds the page to the list import tasks params
func (o *ListImportTasksParams) WithPage(page *int64) *ListImportTasksParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list import tasks params
func (o *ListImportTasksParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list import tasks params
func (o *ListImportTasksParams) WithPageSize(pageSize *int64) *ListImportTasksParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list import tasks params
func (o *ListImportTasksParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithProjectID adds the projectID to the list import tasks params
func (o *ListImportTasksParams) WithProjectID(projectID string) *ListImportTasksParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the list import tasks params
func (o *ListImportTasksParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ListImportTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param project_id
	if err := r.SetPathParam("project_id", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
