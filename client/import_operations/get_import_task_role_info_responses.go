// Code generated by go-swagger; DO NOT EDIT.

package import_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetImportTaskRoleInfoReader is a Reader for the GetImportTaskRoleInfo structure.
type GetImportTaskRoleInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetImportTaskRoleInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetImportTaskRoleInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetImportTaskRoleInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetImportTaskRoleInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetImportTaskRoleInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetImportTaskRoleInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetImportTaskRoleInfoTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetImportTaskRoleInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetImportTaskRoleInfoDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetImportTaskRoleInfoOK creates a GetImportTaskRoleInfoOK with default headers values
func NewGetImportTaskRoleInfoOK() *GetImportTaskRoleInfoOK {
	return &GetImportTaskRoleInfoOK{}
}

/*
GetImportTaskRoleInfoOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetImportTaskRoleInfoOK struct {
	Payload *GetImportTaskRoleInfoOKBody
}

// IsSuccess returns true when this get import task role info o k response has a 2xx status code
func (o *GetImportTaskRoleInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get import task role info o k response has a 3xx status code
func (o *GetImportTaskRoleInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info o k response has a 4xx status code
func (o *GetImportTaskRoleInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get import task role info o k response has a 5xx status code
func (o *GetImportTaskRoleInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get import task role info o k response a status code equal to that given
func (o *GetImportTaskRoleInfoOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get import task role info o k response
func (o *GetImportTaskRoleInfoOK) Code() int {
	return 200
}

func (o *GetImportTaskRoleInfoOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoOK %s", 200, payload)
}

func (o *GetImportTaskRoleInfoOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoOK %s", 200, payload)
}

func (o *GetImportTaskRoleInfoOK) GetPayload() *GetImportTaskRoleInfoOKBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoBadRequest creates a GetImportTaskRoleInfoBadRequest with default headers values
func NewGetImportTaskRoleInfoBadRequest() *GetImportTaskRoleInfoBadRequest {
	return &GetImportTaskRoleInfoBadRequest{}
}

/*
GetImportTaskRoleInfoBadRequest describes a response with status code 400, with default header values.

A request field is invalid.
*/
type GetImportTaskRoleInfoBadRequest struct {
	Payload *GetImportTaskRoleInfoBadRequestBody
}

// IsSuccess returns true when this get import task role info bad request response has a 2xx status code
func (o *GetImportTaskRoleInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get import task role info bad request response has a 3xx status code
func (o *GetImportTaskRoleInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info bad request response has a 4xx status code
func (o *GetImportTaskRoleInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get import task role info bad request response has a 5xx status code
func (o *GetImportTaskRoleInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get import task role info bad request response a status code equal to that given
func (o *GetImportTaskRoleInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get import task role info bad request response
func (o *GetImportTaskRoleInfoBadRequest) Code() int {
	return 400
}

func (o *GetImportTaskRoleInfoBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoBadRequest %s", 400, payload)
}

func (o *GetImportTaskRoleInfoBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoBadRequest %s", 400, payload)
}

func (o *GetImportTaskRoleInfoBadRequest) GetPayload() *GetImportTaskRoleInfoBadRequestBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoUnauthorized creates a GetImportTaskRoleInfoUnauthorized with default headers values
func NewGetImportTaskRoleInfoUnauthorized() *GetImportTaskRoleInfoUnauthorized {
	return &GetImportTaskRoleInfoUnauthorized{}
}

/*
GetImportTaskRoleInfoUnauthorized describes a response with status code 401, with default header values.

The API key cannot be authenticated.
*/
type GetImportTaskRoleInfoUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this get import task role info unauthorized response has a 2xx status code
func (o *GetImportTaskRoleInfoUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get import task role info unauthorized response has a 3xx status code
func (o *GetImportTaskRoleInfoUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info unauthorized response has a 4xx status code
func (o *GetImportTaskRoleInfoUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get import task role info unauthorized response has a 5xx status code
func (o *GetImportTaskRoleInfoUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get import task role info unauthorized response a status code equal to that given
func (o *GetImportTaskRoleInfoUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get import task role info unauthorized response
func (o *GetImportTaskRoleInfoUnauthorized) Code() int {
	return 401
}

func (o *GetImportTaskRoleInfoUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoUnauthorized %s", 401, payload)
}

func (o *GetImportTaskRoleInfoUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoUnauthorized %s", 401, payload)
}

func (o *GetImportTaskRoleInfoUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetImportTaskRoleInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoForbidden creates a GetImportTaskRoleInfoForbidden with default headers values
func NewGetImportTaskRoleInfoForbidden() *GetImportTaskRoleInfoForbidden {
	return &GetImportTaskRoleInfoForbidden{}
}

/*
GetImportTaskRoleInfoForbidden describes a response with status code 403, with default header values.

The API key does not have permission to access the resource.
*/
type GetImportTaskRoleInfoForbidden struct {
	Payload *GetImportTaskRoleInfoForbiddenBody
}

// IsSuccess returns true when this get import task role info forbidden response has a 2xx status code
func (o *GetImportTaskRoleInfoForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get import task role info forbidden response has a 3xx status code
func (o *GetImportTaskRoleInfoForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info forbidden response has a 4xx status code
func (o *GetImportTaskRoleInfoForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get import task role info forbidden response has a 5xx status code
func (o *GetImportTaskRoleInfoForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get import task role info forbidden response a status code equal to that given
func (o *GetImportTaskRoleInfoForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get import task role info forbidden response
func (o *GetImportTaskRoleInfoForbidden) Code() int {
	return 403
}

func (o *GetImportTaskRoleInfoForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoForbidden %s", 403, payload)
}

func (o *GetImportTaskRoleInfoForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoForbidden %s", 403, payload)
}

func (o *GetImportTaskRoleInfoForbidden) GetPayload() *GetImportTaskRoleInfoForbiddenBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoNotFound creates a GetImportTaskRoleInfoNotFound with default headers values
func NewGetImportTaskRoleInfoNotFound() *GetImportTaskRoleInfoNotFound {
	return &GetImportTaskRoleInfoNotFound{}
}

/*
GetImportTaskRoleInfoNotFound describes a response with status code 404, with default header values.

The requested resource does not exist.
*/
type GetImportTaskRoleInfoNotFound struct {
	Payload *GetImportTaskRoleInfoNotFoundBody
}

// IsSuccess returns true when this get import task role info not found response has a 2xx status code
func (o *GetImportTaskRoleInfoNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get import task role info not found response has a 3xx status code
func (o *GetImportTaskRoleInfoNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info not found response has a 4xx status code
func (o *GetImportTaskRoleInfoNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get import task role info not found response has a 5xx status code
func (o *GetImportTaskRoleInfoNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get import task role info not found response a status code equal to that given
func (o *GetImportTaskRoleInfoNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get import task role info not found response
func (o *GetImportTaskRoleInfoNotFound) Code() int {
	return 404
}

func (o *GetImportTaskRoleInfoNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoNotFound %s", 404, payload)
}

func (o *GetImportTaskRoleInfoNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoNotFound %s", 404, payload)
}

func (o *GetImportTaskRoleInfoNotFound) GetPayload() *GetImportTaskRoleInfoNotFoundBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoTooManyRequests creates a GetImportTaskRoleInfoTooManyRequests with default headers values
func NewGetImportTaskRoleInfoTooManyRequests() *GetImportTaskRoleInfoTooManyRequests {
	return &GetImportTaskRoleInfoTooManyRequests{}
}

/*
GetImportTaskRoleInfoTooManyRequests describes a response with status code 429, with default header values.

You have exceed the rate limit.
*/
type GetImportTaskRoleInfoTooManyRequests struct {
	Payload *GetImportTaskRoleInfoTooManyRequestsBody
}

// IsSuccess returns true when this get import task role info too many requests response has a 2xx status code
func (o *GetImportTaskRoleInfoTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get import task role info too many requests response has a 3xx status code
func (o *GetImportTaskRoleInfoTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info too many requests response has a 4xx status code
func (o *GetImportTaskRoleInfoTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get import task role info too many requests response has a 5xx status code
func (o *GetImportTaskRoleInfoTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get import task role info too many requests response a status code equal to that given
func (o *GetImportTaskRoleInfoTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get import task role info too many requests response
func (o *GetImportTaskRoleInfoTooManyRequests) Code() int {
	return 429
}

func (o *GetImportTaskRoleInfoTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoTooManyRequests %s", 429, payload)
}

func (o *GetImportTaskRoleInfoTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoTooManyRequests %s", 429, payload)
}

func (o *GetImportTaskRoleInfoTooManyRequests) GetPayload() *GetImportTaskRoleInfoTooManyRequestsBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoInternalServerError creates a GetImportTaskRoleInfoInternalServerError with default headers values
func NewGetImportTaskRoleInfoInternalServerError() *GetImportTaskRoleInfoInternalServerError {
	return &GetImportTaskRoleInfoInternalServerError{}
}

/*
GetImportTaskRoleInfoInternalServerError describes a response with status code 500, with default header values.

Server error.
*/
type GetImportTaskRoleInfoInternalServerError struct {
	Payload *GetImportTaskRoleInfoInternalServerErrorBody
}

// IsSuccess returns true when this get import task role info internal server error response has a 2xx status code
func (o *GetImportTaskRoleInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get import task role info internal server error response has a 3xx status code
func (o *GetImportTaskRoleInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get import task role info internal server error response has a 4xx status code
func (o *GetImportTaskRoleInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get import task role info internal server error response has a 5xx status code
func (o *GetImportTaskRoleInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get import task role info internal server error response a status code equal to that given
func (o *GetImportTaskRoleInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get import task role info internal server error response
func (o *GetImportTaskRoleInfoInternalServerError) Code() int {
	return 500
}

func (o *GetImportTaskRoleInfoInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoInternalServerError %s", 500, payload)
}

func (o *GetImportTaskRoleInfoInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] getImportTaskRoleInfoInternalServerError %s", 500, payload)
}

func (o *GetImportTaskRoleInfoInternalServerError) GetPayload() *GetImportTaskRoleInfoInternalServerErrorBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImportTaskRoleInfoDefault creates a GetImportTaskRoleInfoDefault with default headers values
func NewGetImportTaskRoleInfoDefault(code int) *GetImportTaskRoleInfoDefault {
	return &GetImportTaskRoleInfoDefault{
		_statusCode: code,
	}
}

/*
GetImportTaskRoleInfoDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetImportTaskRoleInfoDefault struct {
	_statusCode int

	Payload *GetImportTaskRoleInfoDefaultBody
}

// IsSuccess returns true when this get import task role info default response has a 2xx status code
func (o *GetImportTaskRoleInfoDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get import task role info default response has a 3xx status code
func (o *GetImportTaskRoleInfoDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get import task role info default response has a 4xx status code
func (o *GetImportTaskRoleInfoDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get import task role info default response has a 5xx status code
func (o *GetImportTaskRoleInfoDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get import task role info default response a status code equal to that given
func (o *GetImportTaskRoleInfoDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get import task role info default response
func (o *GetImportTaskRoleInfoDefault) Code() int {
	return o._statusCode
}

func (o *GetImportTaskRoleInfoDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] GetImportTaskRoleInfo default %s", o._statusCode, payload)
}

func (o *GetImportTaskRoleInfoDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1beta/projects/{project_id}/clusters/{cluster_id}/imports/role_info][%d] GetImportTaskRoleInfo default %s", o._statusCode, payload)
}

func (o *GetImportTaskRoleInfoDefault) GetPayload() *GetImportTaskRoleInfoDefaultBody {
	return o.Payload
}

func (o *GetImportTaskRoleInfoDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetImportTaskRoleInfoDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetImportTaskRoleInfoBadRequestBody get import task role info bad request body
swagger:model GetImportTaskRoleInfoBadRequestBody
*/
type GetImportTaskRoleInfoBadRequestBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this get import task role info bad request body
func (o *GetImportTaskRoleInfoBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get import task role info bad request body based on context it is used
func (o *GetImportTaskRoleInfoBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoDefaultBody get import task role info default body
swagger:model GetImportTaskRoleInfoDefaultBody
*/
type GetImportTaskRoleInfoDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*GetImportTaskRoleInfoDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get import task role info default body
func (o *GetImportTaskRoleInfoDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImportTaskRoleInfoDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetImportTaskRoleInfo default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetImportTaskRoleInfo default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get import task role info default body based on the context it is used
func (o *GetImportTaskRoleInfoDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImportTaskRoleInfoDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {

			if swag.IsZero(o.Details[i]) { // not required
				return nil
			}

			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("GetImportTaskRoleInfo default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("GetImportTaskRoleInfo default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoDefaultBodyDetailsItems0 get import task role info default body details items0
swagger:model GetImportTaskRoleInfoDefaultBodyDetailsItems0
*/
type GetImportTaskRoleInfoDefaultBodyDetailsItems0 struct {

	// at type
	AtType string `json:"@type,omitempty"`

	// get import task role info default body details items0
	GetImportTaskRoleInfoDefaultBodyDetailsItems0 map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *GetImportTaskRoleInfoDefaultBodyDetailsItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GetImportTaskRoleInfoDefaultBodyDetailsItems0

	rcv.AtType = stage1.AtType
	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "@type")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.GetImportTaskRoleInfoDefaultBodyDetailsItems0 = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o GetImportTaskRoleInfoDefaultBodyDetailsItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// at type
		AtType string `json:"@type,omitempty"`
	}

	stage1.AtType = o.AtType

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.GetImportTaskRoleInfoDefaultBodyDetailsItems0) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.GetImportTaskRoleInfoDefaultBodyDetailsItems0)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this get import task role info default body details items0
func (o *GetImportTaskRoleInfoDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get import task role info default body details items0 based on context it is used
func (o *GetImportTaskRoleInfoDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoForbiddenBody get import task role info forbidden body
swagger:model GetImportTaskRoleInfoForbiddenBody
*/
type GetImportTaskRoleInfoForbiddenBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this get import task role info forbidden body
func (o *GetImportTaskRoleInfoForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get import task role info forbidden body based on context it is used
func (o *GetImportTaskRoleInfoForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoInternalServerErrorBody get import task role info internal server error body
swagger:model GetImportTaskRoleInfoInternalServerErrorBody
*/
type GetImportTaskRoleInfoInternalServerErrorBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this get import task role info internal server error body
func (o *GetImportTaskRoleInfoInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get import task role info internal server error body based on context it is used
func (o *GetImportTaskRoleInfoInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoNotFoundBody get import task role info not found body
swagger:model GetImportTaskRoleInfoNotFoundBody
*/
type GetImportTaskRoleInfoNotFoundBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this get import task role info not found body
func (o *GetImportTaskRoleInfoNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get import task role info not found body based on context it is used
func (o *GetImportTaskRoleInfoNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoOKBody ImportTaskRoleInfo
//
// ImportTaskRoleInfo is the role information for import tasks on a cluster. You can use this information to configure the access for the import tasks to retrieve the data from the data source.
swagger:model GetImportTaskRoleInfoOKBody
*/
type GetImportTaskRoleInfoOKBody struct {

	// aws import role
	AwsImportRole *GetImportTaskRoleInfoOKBodyAwsImportRole `json:"aws_import_role,omitempty"`

	// gcp import role
	GcpImportRole *GetImportTaskRoleInfoOKBodyGcpImportRole `json:"gcp_import_role,omitempty"`
}

// Validate validates this get import task role info o k body
func (o *GetImportTaskRoleInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAwsImportRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGcpImportRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImportTaskRoleInfoOKBody) validateAwsImportRole(formats strfmt.Registry) error {
	if swag.IsZero(o.AwsImportRole) { // not required
		return nil
	}

	if o.AwsImportRole != nil {
		if err := o.AwsImportRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getImportTaskRoleInfoOK" + "." + "aws_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getImportTaskRoleInfoOK" + "." + "aws_import_role")
			}
			return err
		}
	}

	return nil
}

func (o *GetImportTaskRoleInfoOKBody) validateGcpImportRole(formats strfmt.Registry) error {
	if swag.IsZero(o.GcpImportRole) { // not required
		return nil
	}

	if o.GcpImportRole != nil {
		if err := o.GcpImportRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getImportTaskRoleInfoOK" + "." + "gcp_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getImportTaskRoleInfoOK" + "." + "gcp_import_role")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get import task role info o k body based on the context it is used
func (o *GetImportTaskRoleInfoOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAwsImportRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGcpImportRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImportTaskRoleInfoOKBody) contextValidateAwsImportRole(ctx context.Context, formats strfmt.Registry) error {

	if o.AwsImportRole != nil {

		if swag.IsZero(o.AwsImportRole) { // not required
			return nil
		}

		if err := o.AwsImportRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getImportTaskRoleInfoOK" + "." + "aws_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getImportTaskRoleInfoOK" + "." + "aws_import_role")
			}
			return err
		}
	}

	return nil
}

func (o *GetImportTaskRoleInfoOKBody) contextValidateGcpImportRole(ctx context.Context, formats strfmt.Registry) error {

	if o.GcpImportRole != nil {

		if swag.IsZero(o.GcpImportRole) { // not required
			return nil
		}

		if err := o.GcpImportRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getImportTaskRoleInfoOK" + "." + "gcp_import_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getImportTaskRoleInfoOK" + "." + "gcp_import_role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoOKBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoOKBodyAwsImportRole AwsImportTaskRoleInfo
//
// The import role information for an AWS cluster. Only TiDB clusters on AWS return this information. If the TiDB cluster is deployed on GCP, this field is not returned.
swagger:model GetImportTaskRoleInfoOKBodyAwsImportRole
*/
type GetImportTaskRoleInfoOKBodyAwsImportRole struct {

	// The account ID under which the import tasks for this cluster are running.
	// Example: 999999999999
	// Required: true
	AccountID *string `json:"account_id"`

	// The unique external ID that binds to the cluster, which is a long string. When an import task starts and attempts to assume a specified role, it automatically attaches this external ID. This means that you can configure this external ID in the assumed role's trust relationship, so that only the import task of that specified cluster can access the data by assuming the role. This can provide additional security.
	// Example: abcdefghijklmnopqrstuvwxyz0123456789xxxxxxxxxxxxxx
	// Required: true
	ExternalID *string `json:"external_id"`
}

// Validate validates this get import task role info o k body aws import role
func (o *GetImportTaskRoleInfoOKBodyAwsImportRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImportTaskRoleInfoOKBodyAwsImportRole) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("getImportTaskRoleInfoOK"+"."+"aws_import_role"+"."+"account_id", "body", o.AccountID); err != nil {
		return err
	}

	return nil
}

func (o *GetImportTaskRoleInfoOKBodyAwsImportRole) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("getImportTaskRoleInfoOK"+"."+"aws_import_role"+"."+"external_id", "body", o.ExternalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get import task role info o k body aws import role based on context it is used
func (o *GetImportTaskRoleInfoOKBodyAwsImportRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoOKBodyAwsImportRole) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoOKBodyAwsImportRole) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoOKBodyAwsImportRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoOKBodyGcpImportRole GcpImportTaskRoleInfo
//
// The import role information for a GCP cluster. Only TiDB clusters on GCP return this information. If the TiDB cluster is deployed on AWS, this field is not returned.
swagger:model GetImportTaskRoleInfoOKBodyGcpImportRole
*/
type GetImportTaskRoleInfoOKBodyGcpImportRole struct {

	// The account ID under which the import tasks for this cluster are running.
	// Example: example-account@example.com
	// Required: true
	AccountID *string `json:"account_id"`
}

// Validate validates this get import task role info o k body gcp import role
func (o *GetImportTaskRoleInfoOKBodyGcpImportRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetImportTaskRoleInfoOKBodyGcpImportRole) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("getImportTaskRoleInfoOK"+"."+"gcp_import_role"+"."+"account_id", "body", o.AccountID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get import task role info o k body gcp import role based on context it is used
func (o *GetImportTaskRoleInfoOKBodyGcpImportRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoOKBodyGcpImportRole) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoOKBodyGcpImportRole) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoOKBodyGcpImportRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetImportTaskRoleInfoTooManyRequestsBody get import task role info too many requests body
swagger:model GetImportTaskRoleInfoTooManyRequestsBody
*/
type GetImportTaskRoleInfoTooManyRequestsBody struct {

	// code
	//
	// Error code returned with this error.
	Code int64 `json:"code,omitempty"`

	// details
	//
	// Error details returned with this error.
	Details []string `json:"details"`

	// message
	//
	// Error message returned with this error.
	Message string `json:"message,omitempty"`
}

// Validate validates this get import task role info too many requests body
func (o *GetImportTaskRoleInfoTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get import task role info too many requests body based on context it is used
func (o *GetImportTaskRoleInfoTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetImportTaskRoleInfoTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetImportTaskRoleInfoTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res GetImportTaskRoleInfoTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
